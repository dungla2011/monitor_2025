"""
AsyncIO Firebase Helper - Send push notifications via Firebase Cloud Messaging (FCM)

‚ö†Ô∏è QUAN TR·ªåNG - DATA-ONLY MESSAGES:
================================
Script n√†y g·ª≠i DATA-ONLY messages (kh√¥ng c√≥ notification field).
ƒêi·ªÅu n√†y cho ph√©p app Android t·ª± x·ª≠ l√Ω v√† ph√°t CUSTOM SOUND khi ·ªü background.

üì± ANDROID APP - C·∫ßn implement FirebaseMessagingService:
---------------------------------------------------------

public class MyFirebaseMessagingService extends FirebaseMessagingService {
    @Override
    public void onMessageReceived(RemoteMessage remoteMessage) {
        // Nh·∫≠n data message (k·ªÉ c·∫£ khi app ·ªü background)
        Map<String, String> data = remoteMessage.getData();
        
        String title = data.get("title");
        String body = data.get("body");
        String alertType = data.get("alert_type");
        
        // T·∫°o notification v·ªõi CUSTOM SOUND
        NotificationCompat.Builder builder = new NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle(title)
            .setContentText(body)
            .setSmallIcon(R.drawable.ic_notification)
            .setSound(Uri.parse("android.resource://" + getPackageName() + "/" + R.raw.custom_alert))  // ‚úÖ Custom sound
            .setPriority(NotificationCompat.PRIORITY_HIGH);
        
        NotificationManagerCompat.from(this).notify(notificationId, builder.build());
    }
}

üîä ƒê·∫∑t file sound v√†o: app/src/main/res/raw/custom_alert.mp3

üìù AndroidManifest.xml:
------------------------
<service
    android:name=".MyFirebaseMessagingService"
    android:exported="false">
    <intent-filter>
        <action android:name="com.google.firebase.MESSAGING_EVENT" />
    </intent-filter>
</service>

"""

import asyncio
import json
import os
from datetime import datetime
from typing import Optional, Dict, List
import firebase_admin
from firebase_admin import credentials, messaging
from utils import ol1, olerror
from models import get_monitor_settings_for_user

# Global Firebase app instance
_firebase_app = None


async def get_firebase_token_for_user(user_id: int) -> Optional[str]:
    """
    L·∫•y Firebase token t·ª´ monitor_settings theo user_id
    
    Args:
        user_id (int): ID c·ªßa user
        
    Returns:
        str: Firebase token ho·∫∑c None n·∫øu kh√¥ng c√≥
    """
    try:
        settings = get_monitor_settings_for_user(user_id)
        if settings and settings.firebase_token:
            return settings.firebase_token.strip()
        return None
    except Exception as e:
        olerror(f"‚ùå [Firebase] Error getting token for user {user_id}: {e}")
        return None


def initialize_firebase():
    """
    Initialize Firebase Admin SDK
    Ch·ªâ kh·ªüi t·∫°o 1 l·∫ßn duy nh·∫•t
    """
    global _firebase_app
    
    if _firebase_app is not None:
        return _firebase_app
    
    try:
        # ƒê∆∞·ªùng d·∫´n ƒë·∫øn service account JSON file
        service_account_path = os.getenv('FIREBASE_SERVICE_ACCOUNT_PATH', 'firebase_service_account.json')
        
        if not os.path.exists(service_account_path):
            raise FileNotFoundError(f"Firebase service account file not found: {service_account_path}")
        
        # Kh·ªüi t·∫°o Firebase Admin SDK
        cred = credentials.Certificate(service_account_path)
        _firebase_app = firebase_admin.initialize_app(cred)
        
        ol1(f"‚úÖ [Firebase] Initialized successfully with service account: {service_account_path}")
        return _firebase_app
        
    except Exception as e:
        olerror(f"‚ùå [Firebase] Initialization failed: {e}")
        raise


async def send_firebase_notification_async(
    token: str,
    title: str,
    body: str,
    data: Optional[Dict] = None,
    image_url: Optional[str] = None
) -> Dict:
    """
    G·ª≠i push notification ƒë·∫øn 1 device token (AsyncIO version)
    
    ‚ö†Ô∏è CHI·∫æN L∆Ø·ª¢C G·ª¨I 2 L·∫¶N:
    1. L·∫ßn 1: Notification-only (hi·ªÉn th·ªã ngay, ƒë·∫£m b·∫£o user th·∫•y)
    2. L·∫ßn 2: Data-only (app t·ª± x·ª≠ l√Ω, custom sound khi background)
    
    ‚Üí ƒê·∫£m b·∫£o ch·∫Øc ch·∫Øn nh·∫≠n ƒë∆∞·ª£c, tr√πng c≈©ng kh√¥ng sao!
    
    Args:
        token (str): Firebase device token (FCM token)
        title (str): Ti√™u ƒë·ªÅ notification
        body (str): N·ªôi dung notification
        data (dict, optional): Custom data payload
        image_url (str, optional): URL c·ªßa ·∫£nh hi·ªÉn th·ªã trong notification
        
    Returns:
        dict: {
            'success': bool,
            'message': str,
            'message_id_1': str or None,  # Notification message
            'message_id_2': str or None   # Data message
        }
    """
    try:
        # Ensure Firebase is initialized
        initialize_firebase()
        
        loop = asyncio.get_event_loop()
        
        # ============================================
        # MESSAGE 1: NOTIFICATION-ONLY
        # ============================================
        # Hi·ªÉn th·ªã notification m·∫∑c ƒë·ªãnh c·ªßa h·ªá th·ªëng (ƒë·∫£m b·∫£o user th·∫•y ngay)
        notification = messaging.Notification(
            title=title,
            body=body,
            image=image_url
        )
        
        message1 = messaging.Message(
            notification=notification,
            token=token,
            android=messaging.AndroidConfig(
                priority='high',
                notification=messaging.AndroidNotification(
                    sound='default',
                    channel_id='monitor_alerts'
                )
            ),
            apns=messaging.APNSConfig(
                payload=messaging.APNSPayload(
                    aps=messaging.Aps(
                        sound='default',
                        badge=1
                    )
                )
            )
        )
        
        # G·ª≠i message 1
        message_id_1 = await loop.run_in_executor(
            None,
            messaging.send,
            message1
        )
        
        # ============================================
        # MESSAGE 2: DATA-ONLY
        # ============================================
        # G·ª≠i data ƒë·ªÉ app t·ª± x·ª≠ l√Ω (custom sound khi ·ªü background)
        message_data = data or {}
        message_data['title'] = title
        message_data['body'] = body
        if image_url:
            message_data['image_url'] = image_url
        
        message2 = messaging.Message(
            data=message_data,
            token=token,
            android=messaging.AndroidConfig(
                priority='high'
            ),
            apns=messaging.APNSConfig(
                headers={
                    'apns-priority': '10'
                },
                payload=messaging.APNSPayload(
                    aps=messaging.Aps(
                        content_available=True,
                        sound='default',
                        badge=1
                    )
                )
            )
        )
        
        # G·ª≠i message 2
        message_id_2 = await loop.run_in_executor(
            None,
            messaging.send,
            message2
        )
        
        return {
            'success': True,
            'message': 'Both notifications sent successfully',
            'message_id_1': message_id_1,  # Notification message
            'message_id_2': message_id_2   # Data message
        }
        
    except firebase_admin.exceptions.FirebaseError as e:
        return {
            'success': False,
            'message': f'Firebase error: {e.code} - {e.message}',
            'message_id': None
        }
    except Exception as e:
        return {
            'success': False,
            'message': f'Unexpected error: {str(e)}',
            'message_id': None
        }


async def send_firebase_multicast_async(
    tokens: List[str],
    title: str,
    body: str,
    data: Optional[Dict] = None,
    image_url: Optional[str] = None
) -> Dict:
    """
    G·ª≠i push notification ƒë·∫øn nhi·ªÅu device tokens c√πng l√∫c (AsyncIO version)
    
    ‚ö†Ô∏è CHI·∫æN L∆Ø·ª¢C G·ª¨I 2 L·∫¶N cho MULTICAST:
    1. Batch 1: Notification-only (hi·ªÉn th·ªã ngay)
    2. Batch 2: Data-only (app t·ª± x·ª≠ l√Ω, custom sound)
    
    Args:
        tokens (list): List of Firebase device tokens
        title (str): Ti√™u ƒë·ªÅ notification
        body (str): N·ªôi dung notification
        data (dict, optional): Custom data payload
        image_url (str, optional): URL c·ªßa ·∫£nh
        
    Returns:
        dict: {
            'success': bool,
            'message': str,
            'batch1_success': int,  # Notification messages
            'batch2_success': int,  # Data messages
            'total_sent': int
        }
    """
    try:
        # Ensure Firebase is initialized
        initialize_firebase()
        
        loop = asyncio.get_event_loop()
        
        # ============================================
        # BATCH 1: NOTIFICATION-ONLY
        # ============================================
        notification = messaging.Notification(
            title=title,
            body=body,
            image=image_url
        )
        
        message1 = messaging.MulticastMessage(
            notification=notification,
            tokens=tokens,
            android=messaging.AndroidConfig(
                priority='high',
                notification=messaging.AndroidNotification(
                    sound='default',
                    channel_id='monitor_alerts'
                )
            ),
            apns=messaging.APNSConfig(
                payload=messaging.APNSPayload(
                    aps=messaging.Aps(
                        sound='default',
                        badge=1
                    )
                )
            )
        )
        
        # G·ª≠i batch 1
        batch_response_1 = await loop.run_in_executor(
            None,
            messaging.send_multicast,
            message1
        )
        
        # ============================================
        # BATCH 2: DATA-ONLY
        # ============================================
        message_data = data or {}
        message_data['title'] = title
        message_data['body'] = body
        if image_url:
            message_data['image_url'] = image_url
        
        message2 = messaging.MulticastMessage(
            data=message_data,
            tokens=tokens,
            android=messaging.AndroidConfig(
                priority='high'
            ),
            apns=messaging.APNSConfig(
                headers={
                    'apns-priority': '10'
                },
                payload=messaging.APNSPayload(
                    aps=messaging.Aps(
                        content_available=True,
                        sound='default',
                        badge=1
                    )
                )
            )
        )
        
        # G·ª≠i batch 2
        batch_response_2 = await loop.run_in_executor(
            None,
            messaging.send_multicast,
            message2
        )
        
        total_success = batch_response_1.success_count + batch_response_2.success_count
        
        return {
            'success': batch_response_1.failure_count == 0 or batch_response_2.failure_count == 0,
            'message': f'Batch1: {batch_response_1.success_count}/{len(tokens)}, Batch2: {batch_response_2.success_count}/{len(tokens)}',
            'batch1_success': batch_response_1.success_count,
            'batch2_success': batch_response_2.success_count,
            'total_sent': total_success,
            'batch1_failures': batch_response_1.failure_count,
            'batch2_failures': batch_response_2.failure_count
        }
        
    except Exception as e:
        return {
            'success': False,
            'message': f'Multicast error: {str(e)}',
            'success_count': 0,
            'failure_count': len(tokens),
            'responses': []
        }


async def send_monitor_alert_firebase(
    user_id: int,
    monitor_name: str,
    monitor_url: str,
    error_message: str,
    monitor_id: int,
    admin_url: str
) -> Dict:
    """
    G·ª≠i c·∫£nh b√°o monitor qua Firebase (gi·ªëng Telegram alert)
    
    Args:
        user_id (int): ID c·ªßa user (ƒë·ªÉ l·∫•y Firebase token)
        monitor_name (str): T√™n monitor
        monitor_url (str): URL ƒë∆∞·ª£c monitor
        error_message (str): Th√¥ng b√°o l·ªói
        monitor_id (int): ID c·ªßa monitor
        admin_url (str): Link ƒë·∫øn trang admin
        
    Returns:
        dict: Result t·ª´ send_firebase_notification_async
    """
    # L·∫•y Firebase token t·ª´ user settings
    token = await get_firebase_token_for_user(user_id)
    if not token:
        return {
            'success': False,
            'message': f'No Firebase token found for user {user_id}',
            'message_id': None
        }
    title = f"üö® ALERT: {monitor_name}"
    body = f"‚ùå {monitor_url}\n‚ö†Ô∏è {error_message}"
    
    # Custom data ƒë·ªÉ app c√≥ th·ªÉ handle (open specific screen, etc.)
    data = {
        'type': 'monitor_alert',
        'monitor_id': str(monitor_id),
        'monitor_name': monitor_name,
        'monitor_url': monitor_url,
        'error_message': error_message,
        'admin_url': admin_url,
        'timestamp': datetime.now().isoformat()
    }
    
    return await send_firebase_notification_async(
        token=token,
        title=title,
        body=body,
        data=data
    )


async def send_monitor_recovery_firebase(
    user_id: int,
    monitor_name: str,
    monitor_url: str,
    response_time: float,
    monitor_id: int,
    admin_url: str
) -> Dict:
    """
    G·ª≠i th√¥ng b√°o ph·ª•c h·ªìi monitor qua Firebase (gi·ªëng Telegram recovery)
    
    Args:
        user_id (int): ID c·ªßa user (ƒë·ªÉ l·∫•y Firebase token)
        monitor_name (str): T√™n monitor
        monitor_url (str): URL ƒë∆∞·ª£c monitor
        response_time (float): Th·ªùi gian ph·∫£n h·ªìi (ms)
        monitor_id (int): ID c·ªßa monitor
        admin_url (str): Link ƒë·∫øn trang admin
        
    Returns:
        dict: Result t·ª´ send_firebase_notification_async
    """
    # L·∫•y Firebase token t·ª´ user settings
    token = await get_firebase_token_for_user(user_id)
    if not token:
        return {
            'success': False,
            'message': f'No Firebase token found for user {user_id}',
            'message_id': None
        }
    title = f"‚úÖ SERVICE OK: {monitor_name}"
    body = f"‚úÖ {monitor_url}\n‚ö° Response: {response_time:.1f}ms"
    
    # Custom data
    data = {
        'type': 'monitor_recovery',
        'monitor_id': str(monitor_id),
        'monitor_name': monitor_name,
        'monitor_url': monitor_url,
        'response_time': str(response_time),
        'admin_url': admin_url,
        'timestamp': datetime.now().isoformat()
    }
    
    return await send_firebase_notification_async(
        token=token,
        title=title,
        body=body,
        data=data
    )


async def test_firebase_notification():
    """Test Firebase notification"""
    test_token = os.getenv('FIREBASE_TEST_TOKEN')
    
    if not test_token:
        print("‚ùå FIREBASE_TEST_TOKEN not set in environment")
        return
    
    print("üß™ Testing Firebase notification...")
    
    result = await send_firebase_notification_async(
        token=test_token,
        title="üß™ Test Notification",
        body=f"Test from Monitor Service at {datetime.now().strftime('%H:%M:%S')}",
        data={'test': 'true'}
    )
    
    print(f"Result: {result}")


# Example usage
if __name__ == "__main__":
    async def main():
        # Initialize Firebase
        initialize_firebase()
        
        # Test notification
        await test_firebase_notification()
    
    asyncio.run(main())
