import time
import requests
import subprocess
import platform
import threading
import os
import sys
import atexit
import signal
from urllib.parse import urlparse
from datetime import datetime
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv
from db_connection import engine
from models import MonitorItem, get_telegram_config_for_monitor_item, is_alert_time_allowed
from telegram_helper import send_telegram_alert, send_telegram_recovery
from single_instance_api import SingleInstanceManager, MonitorAPI, check_instance_and_get_status
from utils import ol1, format_response_time, safe_get_env_int, safe_get_env_bool, validate_url, generate_thread_name, format_counter_display

# Load environment variables
load_dotenv()

# Single Instance Manager
instance_manager = SingleInstanceManager()

# Global dictionary ƒë·ªÉ track running threads
running_threads = {} 
thread_lock = threading.Lock()
shutdown_event = threading.Event()  # Event ƒë·ªÉ signal shutdown
stop_flags = {}  # Dictionary ƒë·ªÉ signal stop cho t·ª´ng thread ri√™ng bi·ªát

# Telegram notification throttling
telegram_last_sent = {}  # Dictionary ƒë·ªÉ track th·ªùi gian g·ª≠i Telegram cu·ªëi c√πng
TELEGRAM_THROTTLE_SECONDS = 30  # 30 gi√¢y gi·ªØa c√°c notification gi·ªëng nhau

# Error tracking cho t·ª´ng thread
thread_consecutive_errors = {}  # Dictionary ƒë·ªÉ track s·ªë l·∫ßn l·ªói li√™n ti·∫øp c·ªßa t·ª´ng thread
CONSECUTIVE_ERROR_THRESHOLD = 10  # S·ªë l·∫ßn l·ªói li√™n ti·∫øp tr∆∞·ªõc khi gi√£n alert
EXTENDED_ALERT_INTERVAL_MINUTES = 5  # S·ªë ph√∫t gi√£n alert sau khi qu√° ng∆∞·ª°ng (0 = kh√¥ng gi√£n)
thread_last_alert_time = {}  # Dictionary ƒë·ªÉ track th·ªùi gian g·ª≠i alert cu·ªëi c√πng c·ªßa t·ª´ng thread

# Create session factory
SessionLocal = sessionmaker(bind=engine)

# Flag ƒë·ªÉ track cleanup ƒë√£ ch·∫°y ch∆∞a
cleanup_running = False

def cleanup_on_exit():
    """Cleanup function khi tho√°t"""
    global instance_manager, cleanup_running
    
    if cleanup_running:
        return  # Tr√°nh cleanup nhi·ªÅu l·∫ßn
    
    cleanup_running = True
    ol1("üîÑ Cleaning up before exit...")
    
    # Signal all threads to stop
    shutdown_event.set()
    
    # Wait for threads to finish (with timeout)
    with thread_lock:
        for thread_id, thread_info in list(running_threads.items()):
            try:
                thread = thread_info['thread'] if isinstance(thread_info, dict) else thread_info
                if thread.is_alive():
                    ol1(f"‚è≥ Waiting for thread {thread_id} to finish...")
                    thread.join(timeout=2)  # 2 second timeout
                    if thread.is_alive():
                        ol1(f"‚ö†Ô∏è Thread {thread_id} still running after timeout")
            except Exception as e:
                ol1(f"‚ö†Ô∏è Error cleaning up thread {thread_id}: {e}")
                
    # Cleanup instance manager
    if instance_manager:
        instance_manager.cleanup()
    
    ol1("‚úÖ Cleanup completed")

# Register cleanup handlers
atexit.register(cleanup_on_exit)

# Counter ƒë·ªÉ track s·ªë l·∫ßn nh·∫•n Ctrl+C
ctrl_c_count = 0

def signal_handler(signum, frame):
    """Handle shutdown signals"""
    global ctrl_c_count
    ctrl_c_count += 1
    
    ol1(f"üõë Received signal {signum}, shutting down... (press Ctrl+C again for force exit)")
    
    if ctrl_c_count >= 2:
        ol1("‚ö° Force exit - killing process immediately!")
        os._exit(1)  # Force exit kh√¥ng ƒë·ª£i cleanup
    
    cleanup_on_exit()
    sys.exit(0)

# Register signal handlers
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def start_api_server():
    """Kh·ªüi ƒë·ªông API server trong thread ri√™ng"""
    try:
        ol1("üîß Initializing API server...")
        port = int(os.getenv('HTTP_PORT', 5005))
        host = os.getenv('HTTP_HOST', '127.0.0.1')
        
        api = MonitorAPI(host=host, port=port)
        
        # Pass references directly ƒë·ªÉ tr√°nh circular import
        api.set_monitor_refs(
            running_threads=running_threads,
            thread_consecutive_errors=thread_consecutive_errors,
            thread_last_alert_time=thread_last_alert_time,
            get_all_monitor_items=get_all_monitor_items,
            shutdown_event=shutdown_event
        )
        
        ol1("‚úÖ API server initialized successfully")
        api.start_server()
    except Exception as e:
        ol1(f"‚ùå API Server error: {e}")
        import traceback
        ol1(f"‚ùå Traceback: {traceback.format_exc()}")
        # Print more detailed error info
        import traceback
        ol1(f"   Error details: {traceback.format_exc()}")

def get_all_monitor_items():
    """H√†m helper ƒë·ªÉ API c√≥ th·ªÉ truy c·∫≠p t·∫•t c·∫£ monitor items"""
    try:
        session = SessionLocal()
        items = session.query(MonitorItem).filter(
            MonitorItem.deleted_at.is_(None)  # Ch∆∞a b·ªã x√≥a
        ).all()
        session.close()
        return items
    except Exception as e:
        ol1(f"‚ùå Error getting all monitor items: {e}")
        return []

def send_telegram_notification(monitor_item, is_error=True, error_message="", response_time=None):
    """
    G·ª≠i th√¥ng b√°o Telegram v·ªõi logic l·ªói li√™n ti·∫øp v√† gi√£n alert
    
    Args:
        monitor_item: MonitorItem object
        is_error (bool): True n·∫øu l√† l·ªói, False n·∫øu l√† ph·ª•c h·ªìi
        error_message (str): Th√¥ng b√°o l·ªói
        response_time (float): Th·ªùi gian ph·∫£n h·ªìi (ms) cho tr∆∞·ªùng h·ª£p ph·ª•c h·ªìi
    """
    try:
        # Ki·ªÉm tra TELEGRAM_ENABLED t·ª´ .env (global setting)
        # telegram_enabled = os.getenv('TELEGRAM_ENABLED', 'false').lower() == 'true'
        # if not telegram_enabled:
        #     return
        
        thread_id = monitor_item.id
        current_time = time.time()
        
        # X·ª≠ l√Ω logic l·ªói li√™n ti·∫øp
        if is_error:
            # TƒÉng counter l·ªói li√™n ti·∫øp
            thread_consecutive_errors[thread_id] = thread_consecutive_errors.get(thread_id, 0) + 1
            consecutive_errors = thread_consecutive_errors[thread_id]
            
            ol1(f"üìä [Thread {thread_id}] Consecutive errors: {consecutive_errors}")
            
            # Ki·ªÉm tra check interval
            check_interval_seconds = monitor_item.check_interval_seconds if monitor_item.check_interval_seconds else 300
            check_interval_minutes = check_interval_seconds / 60
            
            # Logic gi√£n alert n·∫øu:
            # 1. Check interval < 5 ph√∫t
            # 2. L·ªói li√™n ti·∫øp >= 10 l·∫ßn
            # 3. EXTENDED_ALERT_INTERVAL_MINUTES > 0
            should_throttle_extended = (
                check_interval_minutes < 5 and
                consecutive_errors > CONSECUTIVE_ERROR_THRESHOLD and
                EXTENDED_ALERT_INTERVAL_MINUTES > 0
            )
            
            if should_throttle_extended:
                # Ki·ªÉm tra th·ªùi gian g·ª≠i alert cu·ªëi c√πng
                last_alert_time = thread_last_alert_time.get(thread_id, 0)
                time_since_last_alert = current_time - last_alert_time
                extended_throttle_seconds = EXTENDED_ALERT_INTERVAL_MINUTES * 60
                
                if time_since_last_alert < extended_throttle_seconds:
                    remaining_minutes = (extended_throttle_seconds - time_since_last_alert) / 60
                    ol1(f"üîï [Thread {thread_id}] Extended alert throttle active ({remaining_minutes:.1f}m remaining)")
                    return
                
                ol1(f"‚ö†Ô∏è [Thread {thread_id}] Throttled alert (every {EXTENDED_ALERT_INTERVAL_MINUTES}m, {CONSECUTIVE_ERROR_THRESHOLD} consecutive errs)")
            
        else:
            # Ph·ª•c h·ªìi - reset counter l·ªói li√™n ti·∫øp
            if thread_id in thread_consecutive_errors:
                consecutive_errors = thread_consecutive_errors[thread_id]
                thread_consecutive_errors[thread_id] = 0
                ol1(f"‚úÖ [Thread {thread_id}] Service recovered! Reset consecutive error count (was: {consecutive_errors})")
        
        # Ki·ªÉm tra user alert time settings tr∆∞·ªõc khi g·ª≠i
        user_id = monitor_item.user_id if monitor_item.user_id else 0
        is_allowed, reason = is_alert_time_allowed(user_id)
        
        if not is_allowed:
            ol1(f"üîï [Thread {thread_id}] Alert blocked for user {user_id}: {reason}")
            return
        else:
            ol1(f"‚úÖ [Thread {thread_id}] Alert allowed for user {user_id}: {reason}")
        
        # L·∫•y config Telegram
        telegram_config = get_telegram_config_for_monitor_item(monitor_item.id)
        
        if not telegram_config:
            # Fallback to .env config
            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
            chat_id = os.getenv('TELEGRAM_CHAT_ID')
            
            if not bot_token or not chat_id:
                ol1(f"‚ö†Ô∏è [Thread {thread_id}] No Telegram config found (database or .env)")
                return
        else:
            bot_token = telegram_config['bot_token']
            chat_id = telegram_config['chat_id']
            ol1(f"üì± [Thread {thread_id}] Using database Telegram config")
        
        # Basic throttling (30 gi√¢y gi·ªØa c√°c notification gi·ªëng nhau)
        notification_key = f"{monitor_item.name}_{thread_id}_{is_error}"
        
        if notification_key in telegram_last_sent:
            time_since_last = current_time - telegram_last_sent[notification_key]
            if time_since_last < TELEGRAM_THROTTLE_SECONDS:
                remaining = TELEGRAM_THROTTLE_SECONDS - time_since_last
                ol1(f"üîá [Thread {thread_id}] Basic throttle active ({remaining:.0f}s remaining)")
                return
        
        # C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i
        telegram_last_sent[notification_key] = current_time
        if is_error:
            thread_last_alert_time[thread_id] = current_time
        
        # G·ª≠i notification
        if is_error:
            consecutive_errors = thread_consecutive_errors.get(thread_id, 0)
            enhanced_error_message = f"{error_message} (L·ªói li√™n ti·∫øp: {consecutive_errors})"
            
            result = send_telegram_alert(
                bot_token=bot_token,
                chat_id=chat_id,
                url_admin=f"https://monitor.mytree.vn/member/monitor-item/edit/{monitor_item.id}",
                service_name=monitor_item.name,
                service_url=monitor_item.url_check,
                error_message=enhanced_error_message
            )
            if result['success']:
                ol1(f"üì± [Thread {thread_id}] Telegram alert sent successfully")
            else:
                ol1(f"‚ùå [Thread {thread_id}] Telegram alert failed: {result['message']}")
        else:
            result = send_telegram_recovery(
                bot_token=bot_token,
                chat_id=chat_id,
                service_name=monitor_item.name,
                url_admin=f"https://monitor.mytree.vn/member/monitor-item/edit/{monitor_item.id}",
                service_url=monitor_item.url_check,
                response_time=response_time or 0
            )
            if result['success']:
                ol1(f"üì± [Thread {thread_id}] Telegram recovery notification sent successfully")
            else:
                ol1(f"‚ùå [Thread {thread_id}] Telegram recovery notification failed: {result['message']}")
                
    except Exception as e:
        ol1(f"‚ùå [Thread {monitor_item.id}] Telegram notification error: {e}")


def extract_domain_from_url(url):
    """
    Tr√≠ch xu·∫•t domain ho·∫∑c IP t·ª´ URL
    V√≠ d·ª•: 
    - https://glx.com.vn/path -> glx.com.vn
    - 10.0.1.11 -> 10.0.1.11 (IP thu·∫ßn)
    - http://10.0.1.11 -> 10.0.1.11
    """
    try:
        # N·∫øu URL kh√¥ng c√≥ scheme, coi nh∆∞ l√† hostname/IP thu·∫ßn
        if '://' not in url:
            # Ki·ªÉm tra xem c√≥ ph·∫£i IP ho·∫∑c hostname kh√¥ng
            import re
            # Pattern cho IP address
            ip_pattern = r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$'
            # Pattern cho hostname (domain)
            hostname_pattern = r'^[a-zA-Z0-9.-]+$'
            
            if re.match(ip_pattern, url) or re.match(hostname_pattern, url):
                return url
            else:
                return None
        
        # N·∫øu c√≥ scheme, d√πng urlparse nh∆∞ b√¨nh th∆∞·ªùng
        parsed = urlparse(url)
        return parsed.hostname
    except Exception as e:
        ol1(f"‚ùå Error parsing URL {url}: {e}")
        return None

def ping_icmp(host, timeout=5):
    """
    Ping ICMP ƒë·∫øn host
    Returns: (success: bool, response_time: float or None, error_message: str)
    """
    try:
        # X√°c ƒë·ªãnh command ping d·ª±a tr√™n OS
        if platform.system().lower() == "windows":
            cmd = ["ping", "-n", "1", "-w", str(timeout * 1000), host]
        else:
            cmd = ["ping", "-c", "1", "-W", str(timeout), host]
        
        start_time = time.time()
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout + 2)
        end_time = time.time()
        
        response_time = (end_time - start_time) * 1000  # Convert to milliseconds
        
        if result.returncode == 0:
            return True, response_time, "Ping successful"
        else:
            stderr_output = result.stderr.strip() if result.stderr else "No error details"
            stdout_output = result.stdout.strip() if result.stdout else ""
            
            # Log chi ti·∫øt ƒë·ªÉ debug
            ol1(f"‚ùå Ping command failed:")
            ol1(f"   Command: {' '.join(cmd)}")
            ol1(f"   Return code: {result.returncode}")
            ol1(f"   STDOUT: {stdout_output}")
            ol1(f"   STDERR: {stderr_output}")
            
            return False, None, f"Ping failed (code {result.returncode}): {stderr_output}"
            
    except subprocess.TimeoutExpired:
        return False, None, f"Ping timeout after {timeout} seconds"
    except KeyboardInterrupt:
        return False, None, "Ping interrupted by user (Ctrl+C)"
    except Exception as e:
        return False, None, f"Ping error: {str(e)}"

def ping_web(url, timeout=10):
    """
    Ki·ªÉm tra HTTP/HTTPS URL
    T·ª± ƒë·ªông th√™m scheme n·∫øu kh√¥ng c√≥
    Returns: (success: bool, status_code: int or None, response_time: float, error_message: str)
    """
    try:
        # T·ª± ƒë·ªông th√™m scheme n·∫øu kh√¥ng c√≥
        if '://' not in url:
            # Th·ª≠ HTTPS tr∆∞·ªõc, n·∫øu fail th√¨ HTTP
            test_url = f"https://{url}"
        else:
            test_url = url
        
        start_time = time.time()
        response = requests.get(test_url, timeout=timeout, allow_redirects=True)
        end_time = time.time()
        
        response_time = (end_time - start_time) * 1000  # Convert to milliseconds
        
        if response.status_code == 200:
            return True, response.status_code, response_time, "HTTP request successful"
        else:
            return False, response.status_code, response_time, f"HTTP {response.status_code}: {response.reason}"
            
    except requests.exceptions.SSLError as e:
        # N·∫øu HTTPS fail v·ªõi SSL error, th·ª≠ HTTP
        if '://' not in url:
            try:
                test_url = f"http://{url}"
                start_time = time.time()
                response = requests.get(test_url, timeout=timeout, allow_redirects=True)
                end_time = time.time()
                
                response_time = (end_time - start_time) * 1000
                
                if response.status_code == 200:
                    return True, response.status_code, response_time, "HTTP request successful (fallback to HTTP)"
                else:
                    return False, response.status_code, response_time, f"HTTP {response.status_code}: {response.reason}"
            except:
                return False, None, None, f"SSL error with HTTPS, HTTP also failed: {str(e)}"
        else:
            return False, None, None, f"SSL error: {str(e)}"
    except requests.exceptions.Timeout:
        return False, None, None, f"HTTP timeout after {timeout} seconds"
    except requests.exceptions.ConnectionError:
        return False, None, None, "Connection error - cannot reach server"
    except requests.exceptions.RequestException as e:
        return False, None, None, f"HTTP request error: {str(e)}"
    except Exception as e:
        return False, None, None, f"Unexpected error: {str(e)}"

def check_ping_web(monitor_item, attempt=1, max_attempts=3):
    """
    Ki·ªÉm tra HTTP/HTTPS service v·ªõi retry logic
    
    Args:
        monitor_item: MonitorItem object from database
        attempt: L·∫ßn th·ª≠ hi·ªán t·∫°i (1-3)
        max_attempts: S·ªë l·∫ßn th·ª≠ t·ªëi ƒëa
        
    Returns:
        dict: K·∫øt qu·∫£ ki·ªÉm tra
    """
    ol1(f"   üåê HTTP/HTTPS check (attempt {attempt}/{max_attempts})...")
    
    success, status_code, response_time, message = ping_web(monitor_item.url_check)
    
    result = {
        'success': success,
        'response_time': response_time,
        'message': message,
        'details': {
            'status_code': status_code,
            'method': 'HTTP GET',
            'attempt': attempt
        }
    }
    
    if success:
        ol1(f"   ‚úÖ {message} (Status: {status_code}, Time: {response_time:.2f}ms)")
        return result
    else:
        ol1(f"   ‚ùå Attempt {attempt}: {message}")
        
        # N·∫øu ch∆∞a th√†nh c√¥ng v√† c√≤n l·∫ßn th·ª≠
        if attempt < max_attempts:
            ol1(f"   ‚è≥ Waiting 3s...")
            time.sleep(3)
            return check_ping_web(monitor_item, attempt + 1, max_attempts)
        else:
            ol1(f"   üí• Failed after {max_attempts} attempts")
            return result

def check_ping_icmp(monitor_item, attempt=1, max_attempts=3):
    """
    Ki·ªÉm tra ICMP ping service v·ªõi retry logic
    
    Args:
        monitor_item: MonitorItem object from database
        attempt: L·∫ßn th·ª≠ hi·ªán t·∫°i (1-3)
        max_attempts: S·ªë l·∫ßn th·ª≠ t·ªëi ƒëa
        
    Returns:
        dict: K·∫øt qu·∫£ ki·ªÉm tra
    """
    # Tr√≠ch xu·∫•t domain t·ª´ URL
    host = extract_domain_from_url(monitor_item.url_check)
    if not host:
        return {
            'success': False,
            'response_time': None,
            'message': "‚ùå Cannot extract domain from URL",
            'details': {'host': None, 'method': 'ICMP ping', 'attempt': attempt}
        }
    
    ol1(f"   ÔøΩ ICMP ping to {host} (attempt {attempt}/{max_attempts})...")
    
    success, response_time, message = ping_icmp(host)
    
    result = {
        'success': success,
        'response_time': response_time,
        'message': message,
        'details': {
            'host': host,
            'method': 'ICMP ping',
            'attempt': attempt
        }
    }
    
    if success:
        ol1(f"   ‚úÖ {message} (Time: {response_time:.2f}ms)")
        return result
    else:
        ol1(f"   ‚ùå Attempt {attempt}: {message}")
        
        # N·∫øu ch∆∞a th√†nh c√¥ng v√† c√≤n l·∫ßn th·ª≠
        if attempt < max_attempts:
            ol1(f"   ‚è≥ Waiting 3 seconds before retry...")
            time.sleep(3)
            return check_ping_icmp(monitor_item, attempt + 1, max_attempts)
        else:
            ol1(f"   üí• Failed after {max_attempts} attempts")
            return result

def check_service(monitor_item):
    """
    Ki·ªÉm tra m·ªôt d·ªãch v·ª• d·ª±a tr√™n th√¥ng tin trong database v·ªõi retry logic
    
    Args:
        monitor_item: MonitorItem object from database
        
    Returns:
        dict: K·∫øt qu·∫£ ki·ªÉm tra v·ªõi c√°c key: success, response_time, message, details
    """
    # ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh cho check_interval_seconds n·∫øu None ho·∫∑c 0
    check_interval = monitor_item.check_interval_seconds if monitor_item.check_interval_seconds else 300
    
    ol1(f"\nüîç Checking service: {monitor_item.name} (ID: {monitor_item.id})")
    ol1(f"   Type: {monitor_item.type}")
    ol1(f"   URL: {monitor_item.url_check}")
    ol1(f"   Check interval: {check_interval}s")
    ol1(f"   Retry policy: 3 attempts, 3s interval")
    
    base_result = {
        'monitor_item_id': monitor_item.id,
        'name': monitor_item.name,
        'type': monitor_item.type,
        'url_check': monitor_item.url_check,
        'check_interval': check_interval,
        'check_time': datetime.now(),
        'success': False,
        'response_time': None,
        'message': '',
        'details': {}
    }
    
    if not monitor_item.url_check:
        base_result['message'] = "‚ùå No URL to check"
        return base_result
    
    # G·ªçi h√†m ki·ªÉm tra ph√π h·ª£p
    if monitor_item.type == 'ping_web':
        check_result = check_ping_web(monitor_item)
    elif monitor_item.type == 'ping_icmp':
        check_result = check_ping_icmp(monitor_item)
    else:
        base_result['message'] = f"‚ùå Unknown service type: {monitor_item.type}"
        ol1(f"   {base_result['message']}")
        return base_result
    
    # Merge k·∫øt qu·∫£
    base_result.update({
        'success': check_result['success'],
        'response_time': check_result['response_time'],
        'message': check_result['message'],
        'details': check_result['details']
    })
    
    # Note: Telegram notification s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü thread level ƒë·ªÉ c√≥ context ƒë·∫ßy ƒë·ªß
    
    return base_result

def get_monitor_item_by_id(item_id):
    """
    L·∫•y monitor item t·ª´ database theo ID
    
    Args:
        item_id: ID c·ªßa monitor item
        
    Returns:
        MonitorItem object ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
    """
    try:
        session = SessionLocal()
        item = session.query(MonitorItem).filter(MonitorItem.id == item_id).first()
        session.close()
        return item
    except Exception as e:
        ol1(f"‚ùå Error getting monitor item {item_id}: {e}")
        return None

def update_monitor_item(monitor_item):
    """
    C·∫≠p nh·∫≠t monitor item v√†o database
    
    Args:
        monitor_item: MonitorItem object ƒë√£ ƒë∆∞·ª£c modify
    """
    try:
        session = SessionLocal()
        # L·∫•y item t·ª´ DB v√† c·∫≠p nh·∫≠t
        db_item = session.query(MonitorItem).filter(MonitorItem.id == monitor_item.id).first()
        if db_item:
            db_item.last_check_status = monitor_item.last_check_status
            db_item.last_check_time = datetime.now()
            # C·∫≠p nh·∫≠t counter n·∫øu c√≥ thay ƒë·ªïi
            if hasattr(monitor_item, 'count_online') and monitor_item.count_online is not None:
                db_item.count_online = monitor_item.count_online
            if hasattr(monitor_item, 'count_offline') and monitor_item.count_offline is not None:
                db_item.count_offline = monitor_item.count_offline
            session.commit()
        session.close()
    except Exception as e:
        ol1(f"‚ùå Error updating monitor item {monitor_item.id}: {e}")
        raise

def compare_monitor_item_fields(original_item, current_item):
    """
    So s√°nh c√°c tr∆∞·ªùng quan tr·ªçng c·ªßa monitor item
    
    Args:
        original_item: MonitorItem ban ƒë·∫ßu
        current_item: MonitorItem hi·ªán t·∫°i t·ª´ DB
        
    Returns:
        tuple: (has_changes: bool, changes: list)
    """
    if not current_item:
        return True, ["Item not found in database"]
    
    # C√°c tr∆∞·ªùng c·∫ßn theo d√µi thay ƒë·ªïi
    fields_to_check = [
        ('enable', 'enable'),
        ('name', 'name'),
        ('user_id', 'user_id'),
        ('url_check', 'url_check'),
        ('type', 'type'),
        ('maxAlertCount', 'maxAlertCount'),
        ('check_interval_seconds', 'check_interval_seconds'),
        ('result_check', 'result_check'),
        ('result_error', 'result_error'),
        ('stopTo', 'stopTo'),
        ('forceRestart', 'forceRestart')
    ]
    
    changes = []
    
    for field_name, attr_name in fields_to_check:
        original_value = getattr(original_item, attr_name)
        current_value = getattr(current_item, attr_name)
        
        if original_value != current_value:
            changes.append(f"{field_name}: {original_value} -> {current_value}")
    
    return len(changes) > 0, changes

def monitor_service_thread(monitor_item):
    """
    Monitor m·ªôt d·ªãch v·ª• trong thread ri√™ng bi·ªát
    
    Args:
        monitor_item: MonitorItem object from database
    """
    thread_name = f"Monitor-{monitor_item.id}-{monitor_item.name}"
    threading.current_thread().name = thread_name
    
    # L∆∞u tr·ªØ gi√° tr·ªã ban ƒë·∫ßu ƒë·ªÉ so s√°nh
    original_item = MonitorItem()
    original_item.enable = monitor_item.enable
    original_item.name = monitor_item.name
    original_item.user_id = monitor_item.user_id
    original_item.url_check = monitor_item.url_check
    original_item.type = monitor_item.type
    original_item.maxAlertCount = monitor_item.maxAlertCount
    original_item.check_interval_seconds = monitor_item.check_interval_seconds
    original_item.result_check = monitor_item.result_check
    original_item.result_error = monitor_item.result_error
    original_item.stopTo = monitor_item.stopTo
    original_item.forceRestart = monitor_item.forceRestart
    original_item.last_check_status = monitor_item.last_check_status
    
    check_interval_org = monitor_item.check_interval_seconds if monitor_item.check_interval_seconds else 300

    check_interval = monitor_item.check_interval_seconds if monitor_item.check_interval_seconds else 300
    check_count = 0
    
    # Reset counter l·ªói li√™n ti·∫øp khi start thread
    thread_consecutive_errors[monitor_item.id] = 0
    if monitor_item.id in thread_last_alert_time:
        del thread_last_alert_time[monitor_item.id]
    
    ol1(f"üöÄ [Thread {monitor_item.id}] Starting monitoring for: {monitor_item.name}")
    ol1(f"   [Thread {monitor_item.id}] Check interval: {check_interval} seconds")
    ol1(f"   [Thread {monitor_item.id}] Type: {monitor_item.type}")
    ol1(f"   [Thread {monitor_item.id}] Reset consecutive error counter")
    ol1(f"   [Thread {monitor_item.id}] Monitoring config changes...")
    
    try:
        last_check_time = 0
        
        while not shutdown_event.is_set():  # Check shutdown event
            current_time = time.time()
            
            # Ki·ªÉm tra n·∫øu ƒë√£ ƒë·ªß th·ªùi gian ƒë·ªÉ check service
            if current_time - last_check_time >= check_interval:
                check_count += 1
                timestamp = datetime.now().strftime('%H:%M:%S')
                ol1(f"\nüìä [Thread {monitor_item.id}] Check #{check_count} at {timestamp}")
               
            #    N·∫øu c√≥ monitor_item.stopTo, v√† n·∫øu stopTo > now th√¨ kh√¥ng ch·∫°y check
                if monitor_item.stopTo and monitor_item.stopTo > datetime.now():
                    ol1(f"   ‚è∏Ô∏è [Thread {monitor_item.id}] Monitor is paused until {monitor_item.stopTo}. Skipping check.")
                else:
                    # Ki·ªÉm tra d·ªãch v·ª• v·ªõi log ƒë·∫ßy ƒë·ªß
                    result = check_service(monitor_item)

                    # L∆∞u tr·∫°ng th√°i c≈© ƒë·ªÉ so s√°nh cho Telegram notification
                    old_status = monitor_item.last_check_status
                    
                    # C·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªõi v√† counter
                    new_status = 1 if result['success'] else -1
                    monitor_item.last_check_status = new_status
                    monitor_item.last_check_time = datetime.now()
                    
                    # C·∫≠p nh·∫≠t counter: th√†nh c√¥ng -> count_online++, th·∫•t b·∫°i -> count_offline++
                    if result['success']:
                        if monitor_item.count_online is None:
                            monitor_item.count_online = 0
                        monitor_item.count_online += 1
                        ol1(f"   üìà [Thread {monitor_item.id}] count_online: {monitor_item.count_online}")
                    else:
                        if monitor_item.count_offline is None:
                            monitor_item.count_offline = 0  
                        monitor_item.count_offline += 1
                        ol1(f"   üìâ [Thread {monitor_item.id}] count_offline: {monitor_item.count_offline}")
                    
                    # G·ª≠i Telegram notification d·ª±a tr√™n thay ƒë·ªïi tr·∫°ng th√°i
                    if result['success'] and old_status == -1:
                        # Service ph·ª•c h·ªìi t·ª´ l·ªói -> OK
                        send_telegram_notification(
                            monitor_item=monitor_item,
                            is_error=False,
                            response_time=result['response_time']
                        )

                    if not result['success']:
                        # Service chuy·ªÉn t·ª´ OK/Unknown -> l·ªói
                        send_telegram_notification(
                            monitor_item=monitor_item,
                            is_error=True,
                            error_message=result['message']
                        )

                    # C·∫≠p nh·∫≠t database
                    try:
                        update_monitor_item(monitor_item) 
                    except Exception as e:
                        ol1(f"   ‚ùå [Thread {monitor_item.id}] Error updating database: {e}")

                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ ng·∫Øn g·ªçn
                    status = "‚úÖ SUCCESS" if result['success'] else "‚ùå FAILED"
                    response_time_str = f"{result['response_time']:.2f}ms" if result['response_time'] else "N/A"
                    ol1(f"   [Thread {monitor_item.id}] {status} | {response_time_str} | {monitor_item.name} ({monitor_item.type})")
                
                last_check_time = current_time
            
            # Sleep 3 gi√¢y ho·∫∑c cho ƒë·∫øn khi shutdown
            if shutdown_event.wait(timeout=3):
                break
                
            # Ki·ªÉm tra stop flag ri√™ng cho thread n√†y
            if stop_flags.get(monitor_item.id, False):
                ol1(f"\nüõë [Thread {monitor_item.id}] Received stop signal from MainThread")
                break
            
            # L·∫•y item hi·ªán t·∫°i t·ª´ database ƒë·ªÉ so s√°nh
            current_item = get_monitor_item_by_id(monitor_item.id)
            
            if not current_item:
                ol1(f"\nüõë [Thread {monitor_item.id}] Item not found in database. Stopping {monitor_item.name} after {check_count} checks.")
                break
            
            # So s√°nh c√°c tr∆∞·ªùng quan tr·ªçng
            has_changes, changes = compare_monitor_item_fields(original_item, current_item)
            
            if has_changes:
                ol1(f"\nüîÑ [Thread {monitor_item.id}] Configuration changes detected for {monitor_item.name}:")
                for change in changes:
                    ol1(f"   - {change}")
                ol1(f"üõë [Thread {monitor_item.id}] Stopping thread due to config changes after {check_count} checks.")
                break
            
            # Ki·ªÉm tra enable status ri√™ng (ƒë·ªÉ c√≥ log r√µ r√†ng)
            if not current_item.enable:
                ol1(f"\nüõë [Thread {monitor_item.id}] Monitor disabled (enable=0). Stopping {monitor_item.name} after {check_count} checks.")
                break
                
    except KeyboardInterrupt:
        ol1(f"\nüõë [Thread {monitor_item.id}] Monitor stopped by user after {check_count} checks.")
    except Exception as e:
        ol1(f"\n‚ùå [Thread {monitor_item.id}] Monitor error for {monitor_item.name}: {e}")
    finally:
        # Remove thread from tracking v√† clear stop flag
        with thread_lock:
            if monitor_item.id in running_threads:
                del running_threads[monitor_item.id]
            if monitor_item.id in stop_flags:
                del stop_flags[monitor_item.id]
            # Cleanup error tracking khi thread d·ª´ng
            if monitor_item.id in thread_consecutive_errors:
                del thread_consecutive_errors[monitor_item.id]
            if monitor_item.id in thread_last_alert_time:
                del thread_last_alert_time[monitor_item.id]
            ol1(f"üßπ [Thread {monitor_item.id}] Thread cleanup completed for {monitor_item.name}")

def show_thread_status():
    """
    Hi·ªÉn th·ªã tr·∫°ng th√°i c·ªßa t·∫•t c·∫£ threads ƒëang ch·∫°y
    """
    with thread_lock:
        if not running_threads:
            ol1("‚ùå No monitor threads are currently running")
            return
        
        ol1(f"üìä Monitor Thread Status ({len(running_threads)} threads)")
        ol1("-" * 80)
        
        for item_id, thread_info in running_threads.items():
            status = "üü¢ Running" if thread_info['thread'].is_alive() else "üî¥ Stopped"
            runtime = datetime.now() - thread_info['start_time']
            ol1(f"ID: {item_id:2d} | {thread_info['item'].name:20s} | {status} | Runtime: {runtime}")
        
        active_count = len([t for t in running_threads.values() if t['thread'].is_alive()])
        ol1(f"\nActive: {active_count}/{len(running_threads)} threads")

def get_enabled_items_from_db():
    """
    L·∫•y t·∫•t c·∫£ enabled monitor items t·ª´ database
    """
    try:
        session = SessionLocal()
        items = session.query(MonitorItem).filter(
            MonitorItem.url_check.isnot(None),
            MonitorItem.url_check != '',
            MonitorItem.enable == True
        ).all()
        session.close()
        return items
    except Exception as e:
        ol1(f"‚ùå Error getting enabled items: {e}")
        return []

def get_running_item_ids():
    """
    L·∫•y danh s√°ch ID c·ªßa c√°c items ƒëang ch·∫°y
    """
    with thread_lock:
        return [item_id for item_id, thread_info in running_threads.items() 
                if thread_info['thread'].is_alive()]

def get_running_item_ids_and_start_time():
    """
    L·∫•y danh s√°ch ID v√† th·ªùi gian b·∫Øt ƒë·∫ßu c·ªßa c√°c items ƒëang ch·∫°y
    """
    with thread_lock:
        return {item_id: thread_info['start_time'] for item_id, thread_info in running_threads.items() 
                if thread_info['thread'].is_alive()}

def start_monitor_thread(monitor_item):
    """
    B·∫Øt ƒë·∫ßu m·ªôt monitor thread cho item
    """
    with thread_lock:
        # Ki·ªÉm tra xem ƒë√£ c√≥ thread cho item n√†y ch∆∞a
        if monitor_item.id in running_threads:
            existing_thread = running_threads[monitor_item.id]['thread']
            if existing_thread.is_alive():
                ol1(f"‚ö†Ô∏è [Main] Thread for {monitor_item.name} (ID: {monitor_item.id}) is already running. Skipping.")
                return existing_thread
            else:
                # Thread c≈© ƒë√£ ch·∫øt, x√≥a kh·ªèi tracking
                ol1(f"üßπ [Main] Removing dead thread for {monitor_item.name} (ID: {monitor_item.id})")
                del running_threads[monitor_item.id]
    
    ol1(f"üîß [Main] Starting thread for: {monitor_item.name} (ID: {monitor_item.id})")
    
    thread = threading.Thread(
        target=monitor_service_thread,
        args=(monitor_item,),
        name=f"Monitor-{monitor_item.id}-{monitor_item.name}",
        daemon=True
    )
    
    with thread_lock:
        running_threads[monitor_item.id] = {
            'thread': thread,
            'item': monitor_item,
            'start_time': datetime.now()
        }
    
    thread.start()
    return thread

def force_stop_monitor_thread(item_id):
    """
    Force stop m·ªôt monitor thread b·∫±ng c√°ch set stop flag
    (MainThread c√≥ th·ªÉ "kill" thread n√†y)
    """
    with thread_lock:
        if item_id in running_threads:
            thread_info = running_threads[item_id]
            item_name = thread_info['item'].name
            ol1(f"üíÄ [Main] Force stopping thread: {item_name} (ID: {item_id})")
            
            # Set stop flag cho thread ƒë√≥
            stop_flags[item_id] = True
            
            # Ch·ªù thread stop (timeout 10 gi√¢y)
            if thread_info['thread'].is_alive():
                thread_info['thread'].join(timeout=10)
                if thread_info['thread'].is_alive():
                    ol1(f"‚ö†Ô∏è [Main] Thread {item_id} did not stop within timeout (may need process restart)")
                else:
                    ol1(f"‚úÖ [Main] Thread {item_id} stopped successfully")
            
            return True
    return False

def stop_monitor_thread(item_id):
    """
    D·ª´ng m·ªôt monitor thread (b·∫±ng c√°ch ƒë√°nh d·∫•u ƒë·ªÉ n√≥ t·ª± d·ª´ng)
    """
    with thread_lock:
        if item_id in running_threads:
            thread_info = running_threads[item_id]
            item_name = thread_info['item'].name
            ol1(f"üõë [Main] Requesting stop for: {item_name} (ID: {item_id})")
            
            # Thread s·∫Ω t·ª± d·ª´ng khi ki·ªÉm tra enable status
            # Ch·ªù thread t·ª± cleanup
            if thread_info['thread'].is_alive():
                # Set timeout ƒë·ªÉ tr√°nh wait v√¥ h·∫°n
                thread_info['thread'].join(timeout=10)
                if thread_info['thread'].is_alive():
                    ol1(f"‚ö†Ô∏è [Main] Thread {item_id} did not stop gracefully within timeout")
            
            return True
    return False

def cleanup_dead_threads():
    """
    D·ªçn d·∫πp c√°c threads ƒë√£ ch·∫øt
    """
    with thread_lock:
        dead_threads = []
        for item_id, thread_info in running_threads.items():
            if not thread_info['thread'].is_alive():
                dead_threads.append(item_id)
        
        for item_id in dead_threads:
            thread_info = running_threads.pop(item_id)
            ol1(f"üßπ [Main] Cleaned up dead thread: {thread_info['item'].name} (ID: {item_id})")

def main_manager_loop():
    """
    Main thread qu·∫£n l√Ω t·ª± ƒë·ªông c√°c monitor threads
    Ch·∫°y v√≤ng l·∫∑p 5 gi√¢y m·ªôt l·∫ßn ƒë·ªÉ:
    1. Ki·ªÉm tra items enabled trong DB
    2. So s√°nh v·ªõi running threads
    3. Start threads cho items m·ªõi enabled
    4. Stop threads cho items b·ªã disabled
    """
    ol1("üöÄ Starting Main Thread Manager...")
    ol1("   ‚è∞ Check interval: 5 seconds")
    ol1("   üîÑ Auto-manage monitor threads based on database")
    ol1("="*80)
    
    cycle_count = 0
    
    try:
        while not shutdown_event.is_set():
            cycle_count += 1
            timestamp = datetime.now().strftime('%H:%M:%S')
            
            # L·∫•y enabled items t·ª´ DB
            enabled_items = get_enabled_items_from_db()
            enabled_ids = {item.id for item in enabled_items}


            # L·∫•y running items
            running_ids = set(get_running_item_ids())

            running_ids_and_start_time = get_running_item_ids_and_start_time()

            # Cleanup dead threads tr∆∞·ªõc
            cleanup_dead_threads()
            
            # T√¨m items c·∫ßn start (enabled trong DB nh∆∞ng ch∆∞a running)
            items_to_start = enabled_ids - running_ids
            
            # T√¨m items c·∫ßn stop (running nh∆∞ng kh√¥ng enabled trong DB)  
            items_to_stop = running_ids - enabled_ids
            
            if cycle_count % 12 == 1:  # Print status every 60 seconds (12 * 5s)
                ol1(f"\nüìä [Main Manager] Cycle #{cycle_count} at {timestamp}")
                ol1(f"   üíæ DB Enabled: {len(enabled_ids)} items {list(enabled_ids)}")
                ol1(f"   üèÉ Running: {len(running_ids)} threads {list(running_ids)}")
                
                # In th·ªùi gian b·∫Øt ƒë·∫ßu c·ªßa c√°c running threads (ch·ªâ trong status report)
                for item_id, start_time in running_ids_and_start_time.items():
                    ol1(f"      üïí Thread {item_id} started at {start_time}")
                    
                if items_to_start:
                    ol1(f"   ‚ûï Need to start: {list(items_to_start)}")
                if items_to_stop:
                    ol1(f"   ‚ûñ Need to stop: {list(items_to_stop)}")
            
            # Start new threads
            for item_id in items_to_start:
                item = next((item for item in enabled_items if item.id == item_id), None)
                if item:
                    start_monitor_thread(item)
                    time.sleep(0.1)  # Small delay between starts
            
            # Stop threads for disabled items v·ªõi force stop
            for item_id in items_to_stop:
                force_stop_monitor_thread(item_id)
            
            # Wait 5 seconds or until shutdown
            if shutdown_event.wait(timeout=5):
                break
                
    except KeyboardInterrupt:
        ol1(f"\nüõë [Main Manager] Shutting down after {cycle_count} cycles...")
    except Exception as e:
        ol1(f"\n‚ùå [Main Manager] Error: {e}")
    finally:
        # Signal shutdown to all threads
        shutdown_event.set()
        
        # Set stop flags for all threads
        with thread_lock:
            for item_id in running_threads.keys():
                stop_flags[item_id] = True
        
        ol1("üõë [Main Manager] Stopping all monitor threads...")
        with thread_lock:
            for item_id, thread_info in running_threads.items():
                if thread_info['thread'].is_alive():
                    ol1(f"   ‚è≥ Waiting for {thread_info['item'].name} (ID: {item_id}) to stop...")
                    thread_info['thread'].join(timeout=10)
        
        ol1("‚úÖ [Main Manager] All threads stopped. Manager shutdown complete.")

def get_all_enabled_monitor_items():
    """
    L·∫•y t·∫•t c·∫£ monitor items ƒëang enabled
    """
    try:
        session = SessionLocal()
        items = session.query(MonitorItem).filter(
            MonitorItem.url_check.isnot(None),
            MonitorItem.url_check != '',
            MonitorItem.enable == True
        ).all()
        session.close()
        return items
    except Exception as e:
        ol1(f"‚ùå Error getting enabled monitor items: {e}")
        return []


def main():
    """Main function v·ªõi single instance protection v√† HTTP API"""
    global instance_manager
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == 'status':
            # Ch·ªâ ki·ªÉm tra status, kh√¥ng c·∫ßn single instance
            if check_instance_and_get_status():
                return
            else:
                print("‚ùå No monitor service instance is running")
                return
                
        elif command == 'stop':
            # D·ª´ng service qua API
            if check_instance_and_get_status():
                try:
                    import requests
                    response = requests.post("http://127.0.0.1:5005/api/shutdown", timeout=5)
                    if response.status_code == 200:
                        print("‚úÖ Shutdown command sent successfully")
                    else:
                        print(f"‚ö†Ô∏è Shutdown API response: {response.status_code}")
                except requests.RequestException as e:
                    print(f"‚ùå Cannot send shutdown command: {e}")
            return
                
        elif command == 'manager' or command == 'start':
            # Ki·ªÉm tra single instance
            is_running, pid, port = instance_manager.is_already_running()
            if is_running:
                print(f"‚ö†Ô∏è Monitor service is already running (PID: {pid}, Port: {port})")
                print(f"üåê Dashboard: http://127.0.0.1:{port}")
                print("Use 'python monitor_service.py stop' to shutdown")
                return
            
            # T·∫°o lock file
            if not instance_manager.create_lock_file():
                print("‚ùå Failed to create lock file. Exiting.")
                return
                
            ol1("üöÄ Starting Monitor Service with HTTP API...")
            ol1(f"üîí Instance locked (PID: {os.getpid()})")
            
            # Start HTTP API server in background thread
            api_thread = threading.Thread(target=start_api_server, daemon=True)
            api_thread.start()
            
            # Wait a bit for API server to start
            time.sleep(2)
            ol1("üåê HTTP Dashboard: http://127.0.0.1:5005")
            ol1("üìä API Status: http://127.0.0.1:5005/api/status")
            
            # Start main manager loop
            try:
                main_manager_loop()
            except KeyboardInterrupt:
                ol1("üõë Received Ctrl+C, shutting down gracefully...")
                cleanup_on_exit()
            
        elif command == 'test':
            # Test command kh√¥ng c·∫ßn single instance protection
            enabled_items = get_enabled_items_from_db()
            if enabled_items:
                first_item = enabled_items[0]
                ol1(f"‚úÖ Testing enabled monitor item: {first_item.name} (ID: {first_item.id})")
                ol1(f"   URL: {first_item.url_check}")
                ol1(f"   Type: {first_item.type}")
                ol1("="*80)
                result = check_service(first_item)
                ol1("="*80)
                ol1(f"üèÅ Test completed for: {first_item.name}")
                status = "‚úÖ SUCCESS" if result['success'] else "‚ùå FAILED"
                response_time = f"{result['response_time']:.2f}ms" if result['response_time'] else "N/A"
                ol1(f"   Final result: {status} | {response_time} | {result['message']}")
            else:
                ol1("‚ùå No enabled monitor items found in database")
        else:
            print("Monitor Service 2025 - Single Instance with HTTP API")
            print("="*60)
            print("Usage:")
            print("  python monitor_service.py start      - Start monitor service with API")
            print("  python monitor_service.py manager    - Same as start")            
            print("  python monitor_service.py status     - Check service status")
            print("  python monitor_service.py stop       - Stop running service")
            print("  python monitor_service.py test       - Test first service once")
            print("")
            print("HTTP Dashboard: http://127.0.0.1:5005")
            print("API Endpoints:")
            print("  GET  /api/status    - Service status")
            print("  GET  /api/monitors  - Monitor items") 
            print("  GET  /api/threads   - Thread information")
            print("  GET  /api/logs      - Recent logs")
            print("  POST /api/shutdown  - Shutdown service")
    else:
        # No arguments - show help
        main()
            

if __name__ == "__main__":
    main()
