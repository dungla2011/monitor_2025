{
  "metadata": {
    "timestamp": "2025-09-12T19:14:34.504645",
    "total_duration": 419.828718,
    "python_version": "3.13.2",
    "platform": "win32"
  },
  "statistics": {
    "total_tests": 7,
    "passed_tests": 7,
    "failed_tests": 0,
    "error_tests": 0,
    "timeout_tests": 0,
    "total_successes": 163,
    "total_errors": 0,
    "success_rate": 100.0,
    "assertion_success_rate": 100.0,
    "average_test_duration": 59.97553114285714,
    "fastest_test": "02.test-create-local-db",
    "slowest_test": "06.test-webhook-alerts"
  },
  "results": [
    {
      "file": "E:\\Projects\\monitor_2025\\tests\\01.test-models-with-db-mẫu.py",
      "name": "01.test-models-with-db-mẫu",
      "status": "PASSED",
      "successes": 85,
      "errors": 0,
      "duration": 2.323598,
      "start_time": "2025-09-12 19:07:36",
      "end_time": "2025-09-12 19:07:36",
      "summary": "================================================================================\n✅ Successes: 85\n⚠️ Warnings:  1\n❌ Errors:    0",
      "error_messages": [
        "❌ Errors:    0"
      ],
      "exit_code": 0,
      "raw_output": "🔗 Database: MYSQL on 12.0.0.54:3306/glx_monitor_v2\n🚀 Starting Model-Database Compatibility Test...\n🧪 MODEL-DATABASE COMPATIBILITY TEST\n🕒 Test started at: 2025-09-12 19:07:36\n================================================================================\n\n======================================================================\nTEST 1: DATABASE CONNECTION\n======================================================================\n✅ Database connection successful\n✅ Database version: 10.6.22-MariaDB-0ubuntu0.22.04.1-log\n\n======================================================================\nTEST 2: TABLE EXISTENCE\n======================================================================\n📋 Expected tables: ['monitor_items', 'monitor_configs', 'monitor_and_configs', 'monitor_settings', 'users']\n📋 Database tables: ['affiliate_logs', 'asset_categories', 'assets', 'block_uis', 'cache_key_value', 'cache_key_values', 'cart_items', 'carts', 'categories', 'change_logs', 'cloud_group', 'cloud_servers', 'cloud_transfer', 'conference_cats', 'conference_infos', 'cost_items', 'crm_app_infos', 'crm_message_groups', 'crm_messages', 'demo_and_tag_tbls', 'demo_folder_tbls', 'demo_sub1s', 'demo_tbls', 'department_events', 'department_users', 'departments', 'don_vi_hanh_chinhs', 'download_logs', 'event_and_users', 'event_face_infos', 'event_infos', 'event_registers', 'event_send_actions', 'event_send_email_logs', 'event_send_info_logs', 'event_send_sms_logs', 'event_settings', 'event_user_groups', 'event_user_infos', 'event_user_payments', 'face_data', 'file_clouds', 'file_refers', 'file_share_permissions', 'file_uploads', 'folder_files', 'gia_pha_users', 'gia_phas', 'log_users', 'media_actors', 'media_authors', 'media_cats', 'media_folders', 'media_items', 'media_links', 'media_vendors', 'members_members', 'menu_trees', 'menus', 'migrations', 'model_meta_infos', 'money_and_tags', 'money_logs', 'money_tags', 'monitor_and_configs', 'monitor_configs', 'monitor_items', 'monitor_settings', 'my_document_cats', 'my_documents', 'my_tree_infos', 'network_marketings', 'news', 'news_folders', 'notifications', 'ocr_images', 'order_infos', 'order_items', 'order_ships', 'partner_infos', 'pay_moneylogs', 'payments', 'permission_role', 'permissions', 'personal_access_tokens', 'plan_define_values', 'plan_defines', 'plan_names', 'product_attributes', 'product_folders', 'product_images', 'product_tags', 'product_usages', 'product_variant_options', 'product_variants', 'products', 'quiz_choices', 'quiz_classes', 'quiz_flash_cards', 'quiz_folders', 'quiz_questions', 'quiz_session_info_tests', 'quiz_test_questions', 'quiz_tests', 'quiz_user_and_tests', 'quiz_user_answers', 'quiz_user_classes', 'rand_table', 'role_user', 'roles', 'site_mngs', 'skus', 'skus_product_variant_options', 'spendings', 'tag_demos', 'tags', 'task_infos', 'telesales', 'telescope_entries', 'telescope_entries_tags', 'telescope_monitoring', 'test_mongo1s', 'tmp_download_sessions', 'todo2s', 'transport_infos', 'tree_mng_col_fixes', 'typing_lessons', 'typing_test_results', 'uploader_infos', 'user_clouds', 'user_groups', 'users', 'zalo_messages']\n✅ Table 'monitor_items' exists\n✅ Table 'monitor_configs' exists\n✅ Table 'monitor_and_configs' exists\n✅ Table 'monitor_settings' exists\n✅ Table 'users' exists\n⚠️ Extra tables in database (not in models): ['cloud_servers', 'order_infos', 'quiz_test_questions', 'tag_demos', 'migrations', 'download_logs', 'money_tags', 'demo_tbls', 'cart_items', 'network_marketings', 'crm_app_infos', 'zalo_messages', 'partner_infos', 'conference_infos', 'user_clouds', 'product_attributes', 'todo2s', 'asset_categories', 'cache_key_values', 'event_and_users', 'media_cats', 'quiz_user_and_tests', 'plan_defines', 'face_data', 'site_mngs', 'tmp_download_sessions', 'telescope_monitoring', 'don_vi_hanh_chinhs', 'notifications', 'money_logs', 'quiz_flash_cards', 'quiz_session_info_tests', 'event_send_actions', 'typing_lessons', 'quiz_tests', 'roles', 'event_registers', 'role_user', 'event_settings', 'uploader_infos', 'event_infos', 'user_groups', 'cloud_transfer', 'demo_folder_tbls', 'media_authors', 'cache_key_value', 'task_infos', 'event_face_infos', 'my_document_cats', 'product_usages', 'skus_product_variant_options', 'order_ships', 'spendings', 'telescope_entries_tags', 'telescope_entries', 'menus', 'my_documents', 'quiz_classes', 'members_members', 'block_uis', 'media_items', 'product_images', 'log_users', 'personal_access_tokens', 'news', 'product_folders', 'product_variants', 'telesales', 'media_vendors', 'event_user_groups', 'event_user_infos', 'file_refers', 'ocr_images', 'quiz_choices', 'event_send_email_logs', 'rand_table', 'department_users', 'pay_moneylogs', 'plan_define_values', 'tags', 'cost_items', 'quiz_user_answers', 'skus', 'money_and_tags', 'product_tags', 'gia_phas', 'payments', 'carts', 'media_actors', 'file_clouds', 'file_uploads', 'products', 'quiz_questions', 'test_mongo1s', 'cloud_group', 'conference_cats', 'order_items', 'demo_and_tag_tbls', 'news_folders', 'quiz_folders', 'permission_role', 'quiz_user_classes', 'department_events', 'assets', 'event_send_info_logs', 'model_meta_infos', 'crm_messages', 'crm_message_groups', 'gia_pha_users', 'categories', 'folder_files', 'my_tree_infos', 'plan_names', 'transport_infos', 'demo_sub1s', 'permissions', 'media_links', 'typing_test_results', 'change_logs', 'event_send_sms_logs', 'media_folders', 'file_share_permissions', 'menu_trees', 'product_variant_options', 'tree_mng_col_fixes', 'event_user_payments', 'affiliate_logs', 'departments']\n\n======================================================================\nTEST 3-5: DETAILED TABLE ANALYSIS\n======================================================================\n\n🔍 Testing table: monitor_items (MonitorItem)\n--------------------------------------------------\n\n--- Testing table: monitor_items ---\n📊 Model has 22 columns, DB has 22 columns\n✅   Column 'id': INTEGER ↔ BIGINT\n    ✓ nullable: False\n✅   Column 'name': VARCHAR(255) ↔ VARCHAR(255)\n    ✓ nullable: True\n✅   Column 'enable': INTEGER ↔ TINYINT\n    ✓ nullable: True\n✅   Column 'last_check_status': INTEGER ↔ SMALLINT\n    ✓ nullable: True\n✅   Column 'url_check': VARCHAR(500) ↔ VARCHAR(500)\n    ✓ nullable: True\n✅   Column 'type': VARCHAR(64) ↔ VARCHAR(32)\n    ✓ nullable: True\n✅   Column 'maxAlertCount': INTEGER ↔ BIGINT\n    ✓ nullable: True\n✅   Column 'user_id': INTEGER ↔ BIGINT\n    ✓ nullable: True\n✅   Column 'created_at': DATETIME ↔ DATETIME\n    ✓ nullable: True\n✅   Column 'deleted_at': DATETIME ↔ DATETIME\n    ✓ nullable: True\n✅   Column 'updated_at': DATETIME ↔ DATETIME\n    ✓ nullable: True\n✅   Column 'check_interval_seconds': INTEGER ↔ BIGINT\n    ✓ nullable: True\n✅   Column 'result_valid': VARCHAR(1024) ↔ VARCHAR(1024)\n    ✓ nullable: True\n✅   Column 'result_error': VARCHAR(1024) ↔ VARCHAR(1024)\n    ✓ nullable: True\n✅   Column 'stopTo': DATETIME ↔ DATETIME\n    ✓ nullable: True\n✅   Column 'pingType': INTEGER ↔ BIGINT\n    ✓ nullable: True\n✅   Column 'log': TEXT ↔ TEXT\n    ✓ nullable: True\n✅   Column 'last_check_time': DATETIME ↔ DATETIME\n    ✓ nullable: True\n✅   Column 'queuedSendStr': TEXT ↔ TEXT\n    ✓ nullable: True\n✅   Column 'forceRestart': INTEGER ↔ TINYINT\n    ✓ nullable: True\n✅   Column 'count_online': INTEGER ↔ BIGINT\n    ✓ nullable: False\n✅   Column 'count_offline': INTEGER ↔ BIGINT\n    ✓ nullable: False\n✅   Primary key MATCH: ['id']\n✅   Sample data: 10 rows found\n    📄 Sample row: {'id': 6, 'name': 'Check SSL Test', 'enable': 1, 'last_check_status': 1, 'url_check': 'https://sale.galaxycloud.vn', 'type': 'ssl_expired_check', 'maxAlertCount': None, 'user_id': 1, 'created_at': datetime.datetime(2025, 9, 8, 7, 1, 59), 'deleted_at': None, 'updated_at': datetime.datetime(2025, 9, 12, 8, 18, 20), 'check_interval_seconds': 43200, 'result_valid': None, 'result_error': None, 'stopTo': None, 'pingType': 1, 'log': None, 'last_check_time': datetime.datetime(2025, 9, 12, 8, 18, 20), 'queuedSendStr': None, 'forceRestart': 0, 'count_online': 137, 'count_offline': 9}\n\n🔍 Testing table: monitor_configs (MonitorConfig)\n--------------------------------------------------\n\n--- Testing table: monitor_configs ---\n📊 Model has 11 columns, DB has 11 columns\n✅   Column 'id': INTEGER ↔ BIGINT\n    ✓ nullable: False\n✅   Column 'name': VARCHAR(128) ↔ VARCHAR(128)\n    ✓ nullable: False\n✅   Column 'user_id': INTEGER ↔ BIGINT\n    ✓ nullable: True\n✅   Column 'status': INTEGER ↔ BIGINT\n    ✓ nullable: True\n✅   Column 'created_at': DATETIME ↔ TIMESTAMP\n    ✓ nullable: True\n✅   Column 'updated_at': DATETIME ↔ TIMESTAMP\n    ✓ nullable: True\n✅   Column 'deleted_at': DATETIME ↔ TIMESTAMP\n    ✓ nullable: True\n✅   Column 'image_list': VARCHAR(255) ↔ VARCHAR(256)\n    ✓ nullable: True\n✅   Column 'log': TEXT ↔ TEXT\n    ✓ nullable: True\n✅   Column 'alert_type': VARCHAR(64) ↔ VARCHAR(64)\n    ✓ nullable: True\n✅   Column 'alert_config': TEXT ↔ TEXT\n    ✓ nullable: True\n✅   Primary key MATCH: ['id']\n✅   Sample data: 4 rows found\n    📄 Sample row: {'id': 1, 'name': 'Telegram LAD', 'user_id': 1, 'status': 1, 'created_at': datetime.datetime(2025, 9, 7, 7, 32, 30), 'updated_at': datetime.datetime(2025, 9, 8, 16, 43, 40), 'deleted_at': None, 'image_list': None, 'log': None, 'alert_type': 'telegram', 'alert_config': '8040174107:AAE-XqU-XaV0Y7v30pjZgbfGzHq88LQx0HQ,-4878499254'}\n\n🔍 Testing table: monitor_and_configs (MonitorAndConfig)\n--------------------------------------------------\n\n--- Testing table: monitor_and_configs ---\n📊 Model has 5 columns, DB has 5 columns\n✅   Column 'id': INTEGER ↔ BIGINT\n    ✓ nullable: False\n✅   Column 'monitor_item_id': INTEGER ↔ BIGINT\n    ✓ nullable: False\n✅   Column 'config_id': INTEGER ↔ BIGINT\n    ✓ nullable: False\n✅   Column 'created_at': DATETIME ↔ DATETIME\n    ✓ nullable: True\n✅   Column 'updated_at': DATETIME ↔ DATETIME\n    ✓ nullable: True\n✅   Primary key MATCH: ['id']\n✅   Sample data: 9 rows found\n    📄 Sample row: {'id': 57, 'monitor_item_id': 10, 'config_id': 3, 'created_at': datetime.datetime(2025, 9, 8, 13, 10, 52), 'updated_at': datetime.datetime(2025, 9, 8, 13, 10, 52)}\n\n🔍 Testing table: monitor_settings (MonitorSettings)\n--------------------------------------------------\n\n--- Testing table: monitor_settings ---\n📊 Model has 10 columns, DB has 10 columns\n✅   Column 'id': INTEGER ↔ BIGINT\n    ✓ nullable: False\n✅   Column 'user_id': INTEGER ↔ BIGINT\n    ✓ nullable: True\n✅   Column 'status': INTEGER ↔ BIGINT\n    ✓ nullable: True\n✅   Column 'created_at': DATETIME ↔ TIMESTAMP\n    ✓ nullable: True\n✅   Column 'updated_at': DATETIME ↔ TIMESTAMP\n    ✓ nullable: True\n✅   Column 'deleted_at': DATETIME ↔ TIMESTAMP\n    ✓ nullable: True\n✅   Column 'log': TEXT ↔ TEXT\n    ✓ nullable: True\n✅   Column 'alert_time_ranges': VARCHAR(64) ↔ VARCHAR(64)\n    ✓ nullable: True\n✅   Column 'timezone': INTEGER ↔ SMALLINT\n    ✓ nullable: True\n✅   Column 'global_stop_alert_to': DATETIME ↔ DATETIME\n    ✓ nullable: True\n✅   Primary key MATCH: ['id']\n✅   Sample data: 3 rows found\n    📄 Sample row: {'id': 7, 'user_id': 1, 'status': 1, 'created_at': datetime.datetime(2025, 9, 9, 22, 24, 58), 'updated_at': datetime.datetime(2025, 9, 11, 23, 42, 25), 'deleted_at': None, 'log': None, 'alert_time_ranges': '05:30-23:00', 'timezone': 7, 'global_stop_alert_to': None}\n\n🔍 Testing table: users (User)\n--------------------------------------------------\n\n--- Testing table: users ---\n📊 Model has 20 columns, DB has 20 columns\n✅   Column 'id': INTEGER ↔ BIGINT\n    ✓ nullable: False\n✅   Column 'old_id': INTEGER ↔ BIGINT\n    ✓ nullable: True\n✅   Column 'id__': VARCHAR(255) ↔ VARCHAR(32)\n    ✓ nullable: True\n✅   Column 'username': VARCHAR(255) ↔ VARCHAR(255)\n    ✓ nullable: True\n✅   Column 'password': VARCHAR(255) ↔ VARCHAR(255)\n    ✓ nullable: True\n✅   Column 'email': VARCHAR(255) ↔ VARCHAR(255)\n    ✓ nullable: False\n✅   Column 'phone_number': INTEGER ↔ BIGINT\n    ✓ nullable: True\n✅   Column 'created_at': DATETIME ↔ TIMESTAMP\n    ✓ nullable: True\n✅   Column 'updated_at': DATETIME ↔ TIMESTAMP\n    ✓ nullable: True\n✅   Column 'is_admin': INTEGER ↔ BIGINT\n    ✓ nullable: True\n✅   Column 'deleted_at': DATETIME ↔ TIMESTAMP\n    ✓ nullable: True\n✅   Column 'token_user': VARCHAR(255) ↔ VARCHAR(255)\n    ✓ nullable: True\n✅   Column 'site_id': INTEGER ↔ BIGINT\n    ✓ nullable: True\n✅   Column 'name': VARCHAR(255) ↔ VARCHAR(128)\n    ✓ nullable: True\n✅   Column 'remember_token': VARCHAR(100) ↔ VARCHAR(100)\n    ✓ nullable: True\n✅   Column 'email_active_at': DATETIME ↔ TIMESTAMP\n    ✓ nullable: True\n✅   Column 'reg_str': VARCHAR(256) ↔ VARCHAR(256)\n    ✓ nullable: True\n✅   Column 'log': TEXT ↔ TEXT\n    ✓ nullable: True\n✅   Column 'reset_pw': VARCHAR(255) ↔ VARCHAR(128)\n    ✓ nullable: True\n✅   Column 'avatar': VARCHAR(128) ↔ VARCHAR(128)\n    ✓ nullable: True\n✅   Primary key MATCH: ['id']\n✅   Sample data: 3 rows found\n    📄 Sample row: {'id': 1, 'old_id': None, 'id__': 'jf155074', 'username': 'dungla2011_gmail_com', 'password': None, 'email': 'dungla2011@gmail.com', 'phone_number': None, 'created_at': datetime.datetime(2025, 9, 6, 13, 10, 55), 'updated_at': datetime.datetime(2025, 9, 6, 13, 10, 55), 'is_admin': 1, 'deleted_at': None, 'token_user': None, 'site_id': 0, 'name': None, 'remember_token': None, 'email_active_at': datetime.datetime(2025, 9, 6, 13, 10, 55), 'reg_str': None, 'log': '\\n#2025-09-06 13:10:55#update new id__ jf155074', 'reset_pw': None, 'avatar': None}\n\n================================================================================\n📊 TEST SUMMARY\n================================================================================\n✅ Successes: 85\n⚠️ Warnings:  1\n❌ Errors:    0\n\n⚠️ WARNINGS (1):\n   1. Extra tables in database (not in models): ['cloud_servers', 'order_infos', 'quiz_test_questions', 'tag_demos', 'migrations', 'download_logs', 'money_tags', 'demo_tbls', 'cart_items', 'network_marketings', 'crm_app_infos', 'zalo_messages', 'partner_infos', 'conference_infos', 'user_clouds', 'product_attributes', 'todo2s', 'asset_categories', 'cache_key_values', 'event_and_users', 'media_cats', 'quiz_user_and_tests', 'plan_defines', 'face_data', 'site_mngs', 'tmp_download_sessions', 'telescope_monitoring', 'don_vi_hanh_chinhs', 'notifications', 'money_logs', 'quiz_flash_cards', 'quiz_session_info_tests', 'event_send_actions', 'typing_lessons', 'quiz_tests', 'roles', 'event_registers', 'role_user', 'event_settings', 'uploader_infos', 'event_infos', 'user_groups', 'cloud_transfer', 'demo_folder_tbls', 'media_authors', 'cache_key_value', 'task_infos', 'event_face_infos', 'my_document_cats', 'product_usages', 'skus_product_variant_options', 'order_ships', 'spendings', 'telescope_entries_tags', 'telescope_entries', 'menus', 'my_documents', 'quiz_classes', 'members_members', 'block_uis', 'media_items', 'product_images', 'log_users', 'personal_access_tokens', 'news', 'product_folders', 'product_variants', 'telesales', 'media_vendors', 'event_user_groups', 'event_user_infos', 'file_refers', 'ocr_images', 'quiz_choices', 'event_send_email_logs', 'rand_table', 'department_users', 'pay_moneylogs', 'plan_define_values', 'tags', 'cost_items', 'quiz_user_answers', 'skus', 'money_and_tags', 'product_tags', 'gia_phas', 'payments', 'carts', 'media_actors', 'file_clouds', 'file_uploads', 'products', 'quiz_questions', 'test_mongo1s', 'cloud_group', 'conference_cats', 'order_items', 'demo_and_tag_tbls', 'news_folders', 'quiz_folders', 'permission_role', 'quiz_user_classes', 'department_events', 'assets', 'event_send_info_logs', 'model_meta_infos', 'crm_messages', 'crm_message_groups', 'gia_pha_users', 'categories', 'folder_files', 'my_tree_infos', 'plan_names', 'transport_infos', 'demo_sub1s', 'permissions', 'media_links', 'typing_test_results', 'change_logs', 'event_send_sms_logs', 'media_folders', 'file_share_permissions', 'menu_trees', 'product_variant_options', 'tree_mng_col_fixes', 'event_user_payments', 'affiliate_logs', 'departments']\n\n================================================================================\n🎉 ALL CRITICAL TESTS PASSED!\n💡 Models are compatible with database schema.\n📝 Note: There are some warnings above - please review them.\n🕒 Test completed at: 2025-09-12 19:07:36\n\n🏁 Test finished with exit code: 0\n"
    },
    {
      "file": "E:\\Projects\\monitor_2025\\tests\\02.test-create-local-db.py",
      "name": "02.test-create-local-db",
      "status": "PASSED",
      "successes": 24,
      "errors": 0,
      "duration": 0.2,
      "start_time": "2025-09-12 19:07:39",
      "end_time": "2025-09-12 19:07:39",
      "summary": "================================================================================\n✅ Successes: 24\n⚠️ Warnings:  0\n❌ Errors:    0",
      "error_messages": [
        "❌ Errors:    0"
      ],
      "exit_code": 0,
      "raw_output": "🔗 Database: MYSQL on 12.0.0.54:3306/glx_monitor_v2\n🚀 Starting Local Database Creation Test...\n🕒 Test started at: 2025-09-12 19:07:39\n🧪 LOCAL DATABASE CREATION TEST\n🕒 Test started at: 2025-09-12 19:07:39\n================================================================================\n\n======================================================================\nTEST 1: MYSQL LOCAL CONNECTION\n======================================================================\n✅ MySQL connection successful\n✅ MySQL version: 10.4.32-MariaDB\n✅ Connected as: root@localhost\n\n======================================================================\nTEST 2: CREATE DATABASE\n======================================================================\n✅ Dropped existing database 'monitor_test' (if existed)\n✅ Created database 'monitor_test'\n✅ Database 'monitor_test' verified\n\n======================================================================\nTEST 3: CREATE TABLES FROM MODELS\n======================================================================\n✅ All tables created from SQLAlchemy models\n📋 Expected tables: ['monitor_items', 'monitor_configs', 'monitor_and_configs', 'monitor_settings', 'users']\n📋 Created tables: ['monitor_and_configs', 'monitor_configs', 'monitor_items', 'monitor_settings', 'users']\n✅ Table 'monitor_items' created successfully\n✅ Table 'monitor_configs' created successfully\n✅ Table 'monitor_and_configs' created successfully\n✅ Table 'monitor_settings' created successfully\n✅ Table 'users' created successfully\n\n======================================================================\nTEST 4: INSERT SAMPLE DATA\n======================================================================\n📝 Inserting sample users...\n✅ Inserted 2 sample users\n📝 Inserting sample monitor settings...\n✅ Inserted 2 sample monitor settings\n📝 Inserting sample monitor configs...\n✅ Inserted 3 sample monitor configs\n📝 Inserting sample monitor items...\n✅ Inserted 5 sample monitor items\n📝 Inserting sample monitor-config relationships...\n✅ Inserted 6 monitor-config relationships\n\n======================================================================\nTEST 5: VERIFY DATA INTEGRITY\n======================================================================\n✅ Table 'users': 2 records\n✅ Table 'monitor_settings': 2 records\n✅ Table 'monitor_configs': 3 records\n✅ Table 'monitor_items': 5 records\n✅ Table 'monitor_and_configs': 6 records\n\n📊 Testing data relationships:\n   📌 'Google DNS Check' → 'Local Telegram Test' (telegram)\n   📌 'Google DNS Check' → 'Local Webhook Test' (webhook)\n   📌 'Google Website Check' → 'Local Telegram Test' (telegram)\n   📌 'Local Web Server' → 'Email Alert Test' (email)\n   📌 'SSL Certificate Check' → 'Local Telegram Test' (telegram)\n✅ Found 5 monitor-config relationships\n   👤 'admin_user' (admin@localhost.com) - Alert time: 06:00-23:00\n   👤 'test_user' (test@localhost.com) - Alert time: 08:00-22:00\n✅ Verified 2 users and their settings\n\n================================================================================\n📊 TEST SUMMARY\n================================================================================\n✅ Successes: 24\n⚠️ Warnings:  0\n❌ Errors:    0\n\n================================================================================\n🎉 ALL TESTS PASSED!\n💾 Local database 'monitor_test' created successfully\n🔗 Connection string: mysql+pymysql://root:@localhost:3306/monitor_test\n📊 5 tables created with sample data\n\n🚀 Ready for local development and testing!\n\n📝 Next steps:\n   1. Update .env.test with local database settings\n   2. Test monitor service with --test flag\n   3. Verify API endpoints work with local data\n🕒 Test completed at: 2025-09-12 19:07:39\n🕒 Test completed at: 2025-09-12 19:07:39\n⏱️  Test duration: 0.20 seconds\n🏁 Test finished with exit code: 0\n"
    },
    {
      "file": "E:\\Projects\\monitor_2025\\tests\\03.test-api-endpoints-create-new-console-ok.py",
      "name": "03.test-api-endpoints-create-new-console-ok",
      "status": "PASSED",
      "successes": 10,
      "errors": 0,
      "duration": 33.0,
      "start_time": "2025-09-12 19:07:42",
      "end_time": "2025-09-12 19:08:15",
      "summary": "================================================================================\n✅ Successes: 10\n❌ Errors: 0",
      "error_messages": [
        "❌ Errors: 0"
      ],
      "exit_code": 0,
      "raw_output": "🧪 API ENDPOINTS TEST WITH AUTHENTICATION\n🔐 Credentials: admin / test123\n🕒 Test started at: 2025-09-12 19:07:42\n================================================================================\n🚀 Starting API server...\n   📋 Executing: python monitor_service.py start --test\n   ⏱️ Waiting 5 seconds for server startup...\n   🔍 Testing server response...\n✅ API server started successfully\n\n============================================================\nTESTING AUTHENTICATION\n============================================================\n\n🔒 Testing without authentication (should fail):\n✅ Properly requires authentication\n\n🔒 Testing wrong credentials:\n✅ Properly rejects wrong credentials\n\n🔒 Testing correct credentials:\n✅ Accepts correct credentials\n   ✅ Response: running\n\n============================================================\nTESTING API ENDPOINTS WITH AUTHENTICATION\n============================================================\n🔑 Getting Bearer token...\n✅ Bearer token obtained\n\n📡 Testing: System Status\n   GET http://localhost:5006/api/status\n   Status: 200\n✅ System Status: OK\n   📊 Threads: 4 active\n\n📡 Testing: Monitor List\n   GET http://localhost:5006/api/monitors\n   Status: 200\n✅ Monitor List: OK\n   📊 Monitors: 4 items\n\n📡 Testing: Thread Status\n   GET http://localhost:5006/api/threads\n   Status: 200\n✅ Thread Status: OK\n   📊 Threads: 4 active\n\n📡 Testing: Recent Logs\n   GET http://localhost:5006/api/logs\n   Status: 200\n✅ Recent Logs: OK\n   📊 Logs: 50 lines\n\n📡 Testing: Dashboard Home\n   GET http://localhost:5006/\n   Status: 200\n✅ Dashboard Home: OK\n   📊 HTML: 9476 bytes\n\n🛑 Stopping API server...\n✅ API server stopped\n\n================================================================================\n📊 TEST SUMMARY\n================================================================================\n✅ Successes: 10\n❌ Errors: 0\n\n🎉 ALL API TESTS PASSED!\n🕒 Test completed at: 2025-09-12 19:08:15\n"
    },
    {
      "file": "E:\\Projects\\monitor_2025\\tests\\03.test-api-endpoints.py",
      "name": "03.test-api-endpoints",
      "status": "PASSED",
      "successes": 10,
      "errors": 0,
      "duration": 36.69,
      "start_time": "2025-09-12 19:08:18",
      "end_time": "2025-09-12 19:08:55",
      "summary": "================================================================================\n✅ Successes: 10\n❌ Errors: 0",
      "error_messages": [
        "❌ Errors: 0"
      ],
      "exit_code": 0,
      "raw_output": "🕒 Test started at: 2025-09-12 19:08:18\n🧪 API ENDPOINTS TEST WITH AUTHENTICATION\n🔐 Credentials: admin / test123\n🕒 Test started at: 2025-09-12 19:08:18\n================================================================================\n🚀 Starting API server...\n   📋 Executing: python monitor_service.py start --test\n   ⏱️ Waiting 8 seconds for server startup...\n   🔍 Testing server response...\n✅ API server started successfully\n\n============================================================\nTESTING AUTHENTICATION\n============================================================\n\n🔒 Testing without authentication (should fail):\n✅ Properly requires authentication\n\n🔒 Testing wrong credentials:\n✅ Properly rejects wrong credentials\n\n🔒 Testing correct credentials:\n✅ Accepts correct credentials\n   ✅ Response: running\n\n============================================================\nTESTING API ENDPOINTS WITH AUTHENTICATION\n============================================================\n🔑 Getting Bearer token...\n✅ Bearer token obtained\n\n📡 Testing: System Status\n   GET http://localhost:5006/api/status\n   Status: 200\n✅ System Status: OK\n   📊 Threads: 4 active\n\n📡 Testing: Monitor List\n   GET http://localhost:5006/api/monitors\n   Status: 200\n✅ Monitor List: OK\n   📊 Monitors: 4 items\n\n📡 Testing: Thread Status\n   GET http://localhost:5006/api/threads\n   Status: 200\n✅ Thread Status: OK\n   📊 Threads: 4 active\n\n📡 Testing: Recent Logs\n   GET http://localhost:5006/api/logs\n   Status: 200\n✅ Recent Logs: OK\n   📊 Logs: 50 lines\n\n📡 Testing: Dashboard Home\n   GET http://localhost:5006/\n   Status: 200\n✅ Dashboard Home: OK\n   📊 HTML: 9476 bytes\n\n🛑 Stopping API server...\n✅ API server stopped\n\n================================================================================\n📊 TEST SUMMARY\n================================================================================\n✅ Successes: 10\n❌ Errors: 0\n\n🎉 ALL API TESTS PASSED!\n🕒 Test completed at: 2025-09-12 19:08:55\n⏱️  Test duration: 36.69 seconds\n"
    },
    {
      "file": "E:\\Projects\\monitor_2025\\tests\\05.test-enable-disable.py",
      "name": "05.test-enable-disable",
      "status": "PASSED",
      "successes": 5,
      "errors": 0,
      "duration": 53.56,
      "start_time": "2025-09-12 19:08:57",
      "end_time": "2025-09-12 19:09:51",
      "summary": "================================================================================\n✅ Successes: 5\n❌ Errors: 0",
      "error_messages": [
        "❌ Errors: 0"
      ],
      "exit_code": 0,
      "raw_output": "🧪 Starting Dynamic Monitor Control Test...\n🕒 Test started at: 2025-09-12 19:08:57\n🧪 DYNAMIC MONITOR CONTROL TEST\n🔄 Testing real-time enable/disable functionality\n🕒 Test started at: 2025-09-12 19:08:57\n================================================================================\n🚀 Starting monitor service...\n   📋 Executing: python monitor_service.py start --test\n   ⏱️ Waiting 8 seconds for server startup...\n✅ Monitor service started successfully\n\n======================================================================\n🔄 DYNAMIC MONITOR CONTROL TEST\n======================================================================\n📋 Step 1: Getting initial system state...\n📋 Initial state:\n📋   📊 Active threads: 4\n📋   📊 Total monitors: 4\n📋 🎯 Testing with: Google DNS Check (ID: 1)\n📋 \nStep 2: Disabling monitor 1...\n📋 Database: Monitor 1 disabled\n📋 ⏳ Waiting 12 seconds for system to process changes...\n📋 After disable:\n📋   📊 Active threads: 3\n📋   📊 Enabled monitors: 3\n✅ ✅ Thread count decreased: 4 → 3\n📋 \nStep 3: Re-enabling monitor 1...\n📋 Database: Monitor 1 enabled\n📋 ⏳ Waiting 12 seconds for system to process changes...\n📋 After re-enable:\n📋   📊 Active threads: 4\n📋   📊 Enabled monitors: 4\n✅ ✅ Thread count increased: 3 → 4\n✅ ✅ System returned to initial state\n🛑 Stopping monitor service...\n✅ Monitor service stopped\n\n================================================================================\n📊 DYNAMIC CONTROL TEST SUMMARY\n================================================================================\n✅ Successes: 5\n❌ Errors: 0\n\n🎉 DYNAMIC CONTROL TEST PASSED!\n🔄 Real-time monitor control working perfectly!\n🕒 Test completed at: 2025-09-12 19:09:51\n⏱️  Test duration: 53.56 seconds\n"
    },
    {
      "file": "E:\\Projects\\monitor_2025\\tests\\06.test-webhook-alerts.py",
      "name": "06.test-webhook-alerts",
      "status": "PASSED",
      "successes": 14,
      "errors": 0,
      "duration": 140.82,
      "start_time": "2025-09-12 19:09:53",
      "end_time": "2025-09-12 19:12:14",
      "summary": "================================================================================\n✅ Successes: 14\n❌ Errors: 0",
      "error_messages": [
        "❌ Errors: 0"
      ],
      "exit_code": 0,
      "raw_output": "🧪 Starting Webhook Alert Test...\n🕒 Test started at: 2025-09-12 19:09:53\n🧪 WEBHOOK ALERT TEST\n📨 Testing webhook alert system\n🕒 Test started at: 2025-09-12 19:09:53\n================================================================================\n🚀 Starting monitor service...\n✅ Monitor service started successfully\n\n======================================================================\n📨 WEBHOOK ALERT TEST\n======================================================================\n📋 Step 0: Cleaning all existing monitors and configs...\n✅ 🧹 Cleaned up ALL monitors and configs from database\n📋 Step 1: Setting up test servers...\n🌐 Starting test web server on port 6000...\n✅ Test web server started on port 6000\n📨 Starting webhook server on port 6001...\n✅ Webhook server started on port 6001\n📋 Step 2: Setting up database with test data...\n✅ ✅ Created test monitor with ID: 6\n📋    URL: http://localhost:6000\n📋    Interval: 10 seconds\n✅ ✅ Created webhook config with ID: 4\n📋    Webhook URL: http://localhost:6001/webhook\n✅ Linked monitor 6 with config 4\n📋 Step 3: Restarting monitor service to load new monitor...\n🛑 Stopping monitor service...\n✅ Monitor service stopped\n🚀 Starting monitor service...\n✅ Monitor service started successfully\n📋 Step 4: Waiting for monitor to start checking...\n📋 ⏳ Waiting 24 seconds for 2 monitor cycles...\n📋 Webhook calls after normal operation: 0\n📋 Step 5: Stopping test server to trigger alert...\n🛑 Stopping test web server on port 6000...\n✅ Test web server stopped\n📋 ✅ Confirmed: Server is not responding (as expected)\n📋 Step 6: Waiting for alert webhook...\n📋 ⏳ Waiting 72 seconds for 6 monitor cycles...\n📨 Webhook received at 2025-09-12 19:11:41\n   Path: /webhook\n   Data: {\"timestamp\": \"2025-09-12T19:11:38.975978\", \"alert_type\": \"error\", \"service\": {\"name\": \"Test Webhook Monitor\", \"url\": \"http://localhost:6000\"}, \"message\": \"Connection error - cannot reach server (L\\u1ed7i li\\u00ean ti\\u1ebfp: 1)\", \"status\": \"down\", \"monitor_id\": 6, \"consecutive_errors\": 1, \"check_interval_seconds\": 10, \"webhook_name\": \"Test Webhook Config\"}\n📋 📊 Monitor Status (ID: 6):\n📋     Name: Test Webhook Monitor\n📋     Last Check Status: -1 (-1=error, 1=ok, NULL=not checked)\n📋     Last Check Time: 2025-09-12 19:11:41\n📋     Count Online: 4\n📋     Count Offline: 1\n📋 Final webhook calls received: 1\n📋 New webhook calls: 1\n✅ ✅ Webhook alert triggered! Received 1 webhook calls\n📋 Webhook 1: 2025-09-12 19:11:41 - /webhook\n📋   Body: {\"timestamp\": \"2025-09-12T19:11:38.975978\", \"alert_type\": \"error\", \"service\": {\"name\": \"Test Webhook Monitor\", \"url\": \"http://localhost:6000\"}, \"message\": \"Connection error - cannot reach server (L\\u1ed7i li\\u00ean ti\\u1ebfp: 1)\", \"status\": \"down\", \"monitor_id\": 6, \"consecutive_errors\": 1, \"check_interval_seconds\": 10, \"webhook_name\": \"Test Webhook Config\"}\n📋 ✅ Test data cleanup (already done in cleanup_all_monitors_configs)\n🛑 Stopping test web server on port 6000...\n✅ Test web server stopped\n🛑 Stopping webhook server on port 6001...\n✅ Webhook server stopped\n🛑 Stopping monitor service...\n✅ Monitor service stopped\n\n================================================================================\n📊 WEBHOOK ALERT TEST SUMMARY\n================================================================================\n✅ Successes: 14\n❌ Errors: 0\n\n🎉 WEBHOOK ALERT TEST PASSED!\n📨 Webhook alert system working perfectly!\n🕒 Test completed at: 2025-09-12 19:12:14\n⏱️  Test duration: 140.82 seconds\n"
    },
    {
      "file": "E:\\Projects\\monitor_2025\\tests\\07.test-telegram-alerts.py",
      "name": "07.test-telegram-alerts",
      "status": "PASSED",
      "successes": 15,
      "errors": 0,
      "duration": 137.68,
      "start_time": "2025-09-12 19:12:16",
      "end_time": "2025-09-12 19:14:34",
      "summary": "================================================================================\n✅ Successes: 15\n❌ Errors: 0",
      "error_messages": [
        "❌ Errors: 0"
      ],
      "exit_code": 0,
      "raw_output": "🧪 Starting Telegram Alert Test...\n🕒 Test started at: 2025-09-12 19:12:16\n✅ ✅ Loaded Telegram config from E:\\Projects\\monitor_2025\\.env.telegram\n📋    Bot Token: 8040174107:AAE-XqU-X...\n📋    Chat ID: -4878499254\n🧪 TELEGRAM ALERT TEST\n📱 Testing telegram alert system\n🕒 Test started at: 2025-09-12 19:12:16\n================================================================================\n🚀 Starting monitor service...\n✅ Monitor service started successfully\n\n======================================================================\n📱 TELEGRAM ALERT TEST\n======================================================================\n📋 Step 0: Checking Telegram configuration...\n✅ ✅ Telegram bot connection OK: @TaxiGlxLad1234567bot\n📋 Step 1: Cleaning all existing monitors and configs...\n✅ 🧹 Cleaned up ALL monitors and configs from database\n📋 Step 2: Setting up test server...\n🌐 Starting test web server on port 6000...\n✅ Test web server started on port 6000\n📋 Step 3: Setting up database with test data...\n✅ ✅ Created test monitor with ID: 7\n📋    URL: http://localhost:6000\n📋    Interval: 10 seconds\n✅ ✅ Created telegram config with ID: 5\n📋    Config: 8040174107:AAE-XqU-XaV0Y7v30pjZgbfGzHq88LQx0HQ,-48...\n✅ ✅ Linked monitor 7 with config 5\n📋 Step 4: Restarting monitor service to load new monitor...\n🛑 Stopping monitor service...\n✅ Monitor service stopped\n🚀 Starting monitor service...\n✅ Monitor service started successfully\n📋 Step 5: Waiting for monitor to start checking...\n📋 ⏳ Waiting 24 seconds for 2 monitor cycles...\n📋 Monitor should be running normally now...\n📋 Step 6: Stopping test server to trigger alert...\n🛑 Stopping test web server on port 6000...\n✅ Test web server stopped\n📋 Step 7: Waiting for Telegram alert...\n📋 📱 Check your Telegram chat for alert messages!\n📋 ⏳ Waiting 36 seconds for 3 monitor cycles...\n📋 Step 8: Restarting test server to trigger recovery alert...\n🌐 Starting test web server on port 6000...\n✅ Test web server started on port 6000\n📋 Step 9: Waiting for Telegram recovery alert...\n📋 📱 Check your Telegram chat for recovery message!\n📋 ⏳ Waiting 36 seconds for 3 monitor cycles...\n✅ ✅ Telegram alert test completed successfully!\n📋 📱 Please check your Telegram chat for both alert and recovery messages\n📋 ✅ Test data cleanup (already done in cleanup_all_monitors_configs)\n🛑 Stopping test web server on port 6000...\n✅ Test web server stopped\n🛑 Stopping monitor service...\n✅ Monitor service stopped\n\n================================================================================\n📊 TELEGRAM ALERT TEST SUMMARY\n================================================================================\n✅ Successes: 15\n❌ Errors: 0\n\n🎉 TELEGRAM ALERT TEST PASSED!\n📱 Telegram alert system working perfectly!\n🕒 Test completed at: 2025-09-12 19:14:34\n⏱️  Test duration: 137.68 seconds\n"
    }
  ]
}