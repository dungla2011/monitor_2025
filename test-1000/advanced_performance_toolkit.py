#!/usr/bin/env python3
"""
Script t·ªïng h·ª£p cho performance testing v·ªõi 1000 v√† 3000 domains
H∆∞·ªõng d·∫´n ƒë·∫ßy ƒë·ªß c√°ch ch·∫°y test performance
"""

import sys
import subprocess
import os

def print_banner():
    """In banner"""
    print("=" * 80)
    print("üöÄ ADVANCED PERFORMANCE TESTING TOOLKIT")
    print("=" * 80)
    print("Th∆∞ m·ª•c: test-1000/")
    print("C√°c script c√≥ s·∫µn:")
    print("  1. create_1000_test_domains.py - T·∫°o 1000 test domains (6 lo·∫°i kh√°c nhau)")  
    print("  2. create_3000_test_domains.py - T·∫°o 3000 test records (1000 domains x 3 lo·∫°i)")
    print("  3. cleanup_test_domains.py    - X√≥a 1000 test domains")
    print("  4. cleanup_3000_test_domains.py - X√≥a 3000 test records")
    print("  5. performance_monitor.py     - Monitor hi·ªáu su·∫•t realtime")
    print("  6. ../monitor_service.py      - Main monitoring service (th∆∞ m·ª•c g·ªëc)")
    print("=" * 80)

def show_menu():
    """Hi·ªÉn th·ªã menu"""
    print("\nüìã MENU:")
    print("  1. üèóÔ∏è  T·∫°o 1000 test domains (6 lo·∫°i monitor) - ~16.7 checks/sec")
    print("  2. üî• T·∫°o 3000 test records (1000 domains x 3 lo·∫°i) - ~50 checks/sec")
    print("  3. üìä Ch·∫°y performance monitor")
    print("  4. üöÄ B·∫Øt ƒë·∫ßu monitor service (test mode)")
    print("  5. üõë D·ª´ng monitor service")
    print("  6. üßπ X√≥a 1000 test domains")
    print("  7. üßπ X√≥a 3000 test records") 
    print("  8. üìñ H∆∞·ªõng d·∫´n manual testing")
    print("  9. üìä Hi·ªÉn th·ªã database statistics")
    print("  0. üëã Tho√°t")

def run_script(script_name):
    """Ch·∫°y script Python"""
    try:
        print(f"üöÄ Running {script_name}...")
        result = subprocess.run([sys.executable, script_name], 
                              cwd=os.getcwd(),
                              capture_output=False)
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå Error running {script_name}: {e}")
        return False

def run_script_args(args):
    """Ch·∫°y script v·ªõi arguments"""
    try:
        result = subprocess.run([sys.executable] + args, 
                              cwd=os.getcwd(),
                              capture_output=False)
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def show_database_stats():
    """Hi·ªÉn th·ªã database statistics"""
    try:
        print("\nüìä DATABASE STATISTICS")
        print("=" * 50)
        result = subprocess.run([
            sys.executable, "-c", 
            """
import sys, os
sys.path.insert(0, '..')
from dotenv import load_dotenv
load_dotenv('../.env.test')
from sqlalchemy.orm import sessionmaker
from db_connection import engine
from models import MonitorItem

session = sessionmaker(bind=engine)()
try:
    total = session.query(MonitorItem).count()
    enabled = session.query(MonitorItem).filter(MonitorItem.enable == True).count()
    test_1k = session.query(MonitorItem).filter(MonitorItem.name.like('TEST_%')).filter(~MonitorItem.name.like('TEST_3K_%')).count()
    test_3k = session.query(MonitorItem).filter(MonitorItem.name.like('TEST_3K_%')).count()
    online = session.query(MonitorItem).filter(MonitorItem.last_check_status == 1).count()
    offline = session.query(MonitorItem).filter(MonitorItem.last_check_status == -1).count()
    pending = session.query(MonitorItem).filter(MonitorItem.last_check_status.is_(None)).count()
    
    print(f"Total items: {total}")
    print(f"Enabled items: {enabled}")
    print(f"1K Test domains: {test_1k}")
    print(f"3K Test records: {test_3k}")
    print(f"Status - Online: {online} | Offline: {offline} | Pending: {pending}")
    
    if test_1k > 0:
        print(f"1K Test load: ~{test_1k/60:.1f} checks/second")
    if test_3k > 0:
        print(f"3K Test load: ~{test_3k/60:.1f} checks/second")
    
    total_test_load = (test_1k + test_3k) / 60
    if total_test_load > 0:
        print(f"Total test load: ~{total_test_load:.1f} checks/second")
        
finally:
    session.close()
            """
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print(result.stdout)
        else:
            print(f"‚ùå Error getting stats: {result.stderr}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def show_manual_guide():
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n manual"""
    print("\n" + "="*70)
    print("üìñ H∆Ø·ªöNG D·∫™N MANUAL TESTING")
    print("="*70)
    
    print("\nüîÑ 1. LIGHTWEIGHT TEST (1000 domains):")
    print("   Load: ~16.7 checks/second")
    print("   1. python create_1000_test_domains.py")
    print("   2. python performance_monitor.py  # Terminal m·ªõi")
    print("   3. cd .. && python monitor_service.py start --test  # Terminal th·ª© 3")
    print("   4. python cleanup_test_domains.py  # Sau khi test xong")
    
    print("\nüî• 2. INTENSIVE TEST (3000 records):")
    print("   Load: ~50 checks/second - HIGH PERFORMANCE TEST!")
    print("   1. python create_3000_test_domains.py")
    print("   2. python performance_monitor.py  # Terminal m·ªõi")
    print("   3. cd .. && python monitor_service.py start --test  # Terminal th·ª© 3")
    print("   4. python cleanup_3000_test_domains.py  # Sau khi test xong")
    
    print("\nüìä 3. PERFORMANCE METRICS TO MONITOR:")
    print("   - CPU usage (should stay under 80%)")
    print("   - Memory usage (watch for leaks)")
    print("   - Thread count (should be stable)")
    print("   - Database response time")
    print("   - Network I/O")
    print("   - Error rate")
    
    print("\n‚ö†Ô∏è 4. PERFORMANCE WARNINGS:")
    print("   - 1K test: Suitable for development testing")
    print("   - 3K test: HIGH LOAD - production-like stress test")
    print("   - Monitor system resources closely during 3K test")
    print("   - Stop test immediately if system becomes unstable")
    
    print("\nüéØ 5. EXPECTED RESULTS:")
    print("   - Service should handle load without crashes")
    print("   - Memory usage should stabilize (no leaks)")
    print("   - Response times should remain reasonable")
    print("   - Error rates should be low (<5%)")
    
    print("\nüìÅ 6. TEST DATA:")
    print("   - 1000 real domains from major websites")
    print("   - 3 test types: web_content, ping_icmp, ssl_expired_check")
    print("   - 60 second intervals for all tests")
    print("   - Uses test database (.env.test)")

def main():
    """Main function"""
    print_banner()
    
    # Check if we're in the correct directory
    current_dir = os.path.basename(os.getcwd())
    if current_dir != "test-1000":
        print("‚ö†Ô∏è  Warning: N√™n ch·∫°y script n√†y t·ª´ th∆∞ m·ª•c test-1000")
        print(f"   Current directory: {os.getcwd()}")
    
    while True:
        show_menu()
        
        try:
            choice = input("\n‚ùì Ch·ªçn option (0-9): ").strip()
            
            if choice == '0':
                print("üëã T·∫°m bi·ªát!")
                break
                
            elif choice == '1':
                print("\nüèóÔ∏è T·∫°o 1000 test domains (6 lo·∫°i monitor)...")
                print("üí° Load: ~16.7 checks/second")
                run_script("create_1000_test_domains.py")
                
            elif choice == '2':
                print("\nüî• T·∫°o 3000 test records (1000 domains x 3 lo·∫°i)...")
                print("‚ö†Ô∏è  C·∫¢NH B√ÅO: Load cao ~50 checks/second!")
                print("   ƒêi·ªÅu n√†y c√≥ th·ªÉ g√¢y t·∫£i n·∫∑ng cho h·ªá th·ªëng!")
                confirm = input("‚ùì B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (y/N): ").lower().strip()
                if confirm in ['y', 'yes']:
                    run_script("create_3000_test_domains.py")
                else:
                    print("‚ùå ƒê√£ h·ªßy t·∫°o 3000 test records")
                
            elif choice == '3':
                print("\nüìä Kh·ªüi ƒë·ªông performance monitor...")
                print("üí° Tip: Monitor s·∫Ω hi·ªÉn th·ªã stats realtime cho c·∫£ 1K v√† 3K tests")
                run_script("performance_monitor.py")
                
            elif choice == '4':
                print("\nüöÄ B·∫Øt ƒë·∫ßu monitor service (test mode)...")
                print("üí° Service s·∫Ω ch·∫°y v·ªõi t·∫•t c·∫£ test domains/records")
                try:
                    subprocess.run([sys.executable, "../monitor_service.py", "start", "--test"])
                except KeyboardInterrupt:
                    print("\nüõë Service stopped by user")
                    
            elif choice == '5':
                print("\nüõë D·ª´ng monitor service...")
                run_script_args(["../monitor_service.py", "stop"])
                
            elif choice == '6':
                print("\nüßπ X√≥a 1000 test domains...")
                run_script("cleanup_test_domains.py")
                
            elif choice == '7':
                print("\nüßπ X√≥a 3000 test records...")
                run_script("cleanup_3000_test_domains.py")
                
            elif choice == '8':
                show_manual_guide()
                input("\n‚èé Press Enter to continue...")
                
            elif choice == '9':
                show_database_stats()
                input("\n‚èé Press Enter to continue...")
                
            else:
                print("‚ùå Option kh√¥ng h·ª£p l·ªá! Ch·ªçn t·ª´ 0-9")
                
        except KeyboardInterrupt:
            print("\nüëã T·∫°m bi·ªát!")
            break
        except Exception as e:
            print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã T·∫°m bi·ªát!")
        sys.exit(0)
