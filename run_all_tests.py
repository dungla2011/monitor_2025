#!/usr/bin/env python3
"""
Monitor Service Master Test Runner
Ch·∫°y t·∫•t c·∫£ c√°c test c·ªßa monitoring system
"""

import os
import sys
import subprocess
import time
from datetime import datetime

def print_banner():
    """Print test banner"""
    print("="*80)
    print("üß™ MONITOR SERVICE COMPREHENSIVE TEST SUITE")
    print("="*80)
    print(f"üìÖ Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üñ•Ô∏è  Platform: {sys.platform}")
    print(f"üêç Python: {sys.version.split()[0]}")
    print("="*80)

def check_service_status():
    """Check if monitor service is running"""
    print("\nüîç Checking Monitor Service Status...")
    
    try:
        import requests
        response = requests.get('http://127.0.0.1:5005/api/status', timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Monitor service is running (uptime: {data.get('uptime', 'N/A')})")
            return True
        else:
            print(f"‚ö†Ô∏è Monitor service responding with status {response.status_code}")
            return False
    except ImportError:
        print("‚ö†Ô∏è requests module not available - cannot check service status")
        return False
    except:
        print("‚ùå Monitor service is not responding")
        return False

def run_test_script(script_name, description):
    """Run a test script and return success status"""
    print(f"\nüîß {description}")
    print("-" * 60)
    
    if not os.path.exists(script_name):
        print(f"‚ö†Ô∏è Test script {script_name} not found - skipping")
        return True  # Don't fail if optional test is missing
    
    try:
        # Run the test script
        result = subprocess.run([sys.executable, script_name], 
                              capture_output=False, 
                              text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - PASSED")
            return True
        else:
            print(f"‚ùå {description} - FAILED (exit code: {result.returncode})")
            return False
            
    except Exception as e:
        print(f"‚ùå Error running {script_name}: {e}")
        return False

def run_basic_health_check():
    """Run basic health checks without external scripts"""
    print(f"\nü©∫ Basic Health Check")
    print("-" * 60)
    
    checks_passed = 0
    total_checks = 0
    
    # Check 1: Python modules
    total_checks += 1
    try:
        import sqlalchemy
        import flask
        import requests
        import psutil
        print("‚úÖ Required Python modules available")
        checks_passed += 1
    except ImportError as e:
        print(f"‚ùå Missing Python module: {e}")
    
    # Check 2: Environment file
    total_checks += 1
    if os.path.exists('.env'):
        print("‚úÖ .env file exists")
        checks_passed += 1
    else:
        print("‚ùå .env file not found")
    
    # Check 3: Database modules
    total_checks += 1
    try:
        from db_connection import engine
        from models import MonitorItem
        print("‚úÖ Database modules can be imported")
        checks_passed += 1
    except Exception as e:
        print(f"‚ùå Database module error: {e}")
    
    # Check 4: Utility modules
    total_checks += 1
    try:
        from utils import ol1, format_response_time
        print("‚úÖ Utility modules can be imported")
        checks_passed += 1
    except Exception as e:
        print(f"‚ùå Utility module error: {e}")
    
    # Check 5: Main service module
    total_checks += 1
    try:
        from monitor_service import check_service
        print("‚úÖ Main service modules can be imported")
        checks_passed += 1
    except Exception as e:
        print(f"‚ùå Main service module error: {e}")
    
    print(f"\nüìä Health Check: {checks_passed}/{total_checks} checks passed")
    return checks_passed == total_checks

def run_quick_functional_test():
    """Run quick functional tests"""
    print(f"\n‚ö° Quick Functional Test")
    print("-" * 60)
    
    try:
        from monitor_service import ping_web, ping_icmp
        
        # Test ping_web
        print("üîÑ Testing ping_web...")
        success, status_code, response_time, message = ping_web('https://google.com', timeout=10)
        if success:
            print(f"‚úÖ ping_web: {message} ({response_time:.2f}ms)")
        else:
            print(f"‚ö†Ô∏è ping_web: {message}")
        
        # Test ping_icmp  
        print("üîÑ Testing ping_icmp...")
        success, response_time, message = ping_icmp('8.8.8.8', timeout=10)
        if success:
            print(f"‚úÖ ping_icmp: {message} ({response_time:.2f}ms)")
        else:
            print(f"‚ö†Ô∏è ping_icmp: {message}")
        
        print("‚úÖ Quick functional test completed")
        return True
        
    except Exception as e:
        print(f"‚ùå Quick functional test failed: {e}")
        return False

def print_test_instructions():
    """Print instructions for manual testing"""
    print(f"\nüìã Manual Testing Instructions")
    print("-" * 60)
    print("1. üåê Open browser and visit: http://127.0.0.1:5005")
    print("2. üìä Check dashboard displays correctly")
    print("3. üîß Test API endpoints:")
    print("   - http://127.0.0.1:5005/api/status")
    print("   - http://127.0.0.1:5005/api/monitors")
    print("   - http://127.0.0.1:5005/api/threads")
    print("4. üì± Test Telegram notifications (if configured)")
    print("5. üíæ Check database for test data")
    print("6. üìÅ Check logs folder for log files")

def print_summary(all_passed, service_running):
    """Print final test summary"""
    print("\n" + "="*80)
    print("üéØ TEST SUMMARY")
    print("="*80)
    
    print(f"üìä Overall Status: {'‚úÖ ALL TESTS PASSED' if all_passed else '‚ùå SOME TESTS FAILED'}")
    print(f"üîß Service Status: {'‚úÖ RUNNING' if service_running else '‚ùå NOT RUNNING'}")
    print(f"‚è∞ Completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    if all_passed and service_running:
        print("\nüéâ Monitor Service is ready for production!")
    elif all_passed and not service_running:
        print("\n‚úÖ All tests passed, but service is not running")
        print("   Start the service with: python monitor_service.py start")
    else:
        print("\n‚ö†Ô∏è Please fix the failed tests before deploying")
    
    print("\nüìö Next Steps:")
    print("   ‚Ä¢ Review any failed tests above")
    print("   ‚Ä¢ Check logs for detailed error information")
    print("   ‚Ä¢ Ensure all environment variables are set correctly")
    print("   ‚Ä¢ Verify database connection and tables exist")
    print("   ‚Ä¢ Test manually using the web dashboard")
    
    print("="*80)

def main():
    """Main test runner"""
    print_banner()
    
    # Check command line arguments
    if len(sys.argv) > 1:
        if sys.argv[1] == '--help':
            print("Monitor Service Master Test Runner")
            print("Usage:")
            print("  python run_all_tests.py              - Run all available tests")
            print("  python run_all_tests.py --quick      - Run only quick tests")
            print("  python run_all_tests.py --help       - Show this help")
            return
        elif sys.argv[1] == '--quick':
            print("üöÄ Running QUICK tests only...")
            quick_mode = True
        else:
            print(f"Unknown option: {sys.argv[1]}")
            return
    else:
        quick_mode = False
    
    # Check service status
    service_running = check_service_status()
    
    # Run basic health check
    health_passed = run_basic_health_check()
    
    if not health_passed:
        print("\n‚ùå Basic health check failed - cannot continue with advanced tests")
        print("   Please fix the basic issues first")
        print_summary(False, service_running)
        return
    
    # Run quick functional test
    quick_passed = run_quick_functional_test()
    
    all_passed = health_passed and quick_passed
    
    if not quick_mode:
        print(f"\nüîß Running Advanced Tests...")
        
        # List of test scripts to run
        test_scripts = [
            ('test_monitor_features.py', 'Comprehensive Feature Tests'),
        ]
        
        # Only run performance tests if service is running
        if service_running:
            test_scripts.append(('test_performance.py', 'Performance Tests'))
        else:
            print("‚ö†Ô∏è Skipping performance tests - service not running")
        
        # Run each test script
        for script_name, description in test_scripts:
            script_passed = run_test_script(script_name, description)
            if not script_passed:
                all_passed = False
            time.sleep(2)  # Brief pause between tests
    
    # Print manual testing instructions
    print_test_instructions()
    
    # Print final summary
    print_summary(all_passed, service_running)
    
    # Exit with appropriate code
    sys.exit(0 if all_passed else 1)

if __name__ == "__main__":
    main()
