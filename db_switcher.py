#!/usr/bin/env python3
"""
Database Switcher Utility
D·ªÖ d√†ng chuy·ªÉn ƒë·ªïi gi·ªØa MySQL v√† PostgreSQL
"""

import os
import shutil
from pathlib import Path

def create_env_backup():
    """T·∫°o backup c·ªßa file .env hi·ªán t·∫°i"""
    if os.path.exists('.env'):
        shutil.copy('.env', '.env.backup')
        print("‚úÖ ƒê√£ backup file .env hi·ªán t·∫°i -> .env.backup")

def switch_to_mysql():
    """Chuy·ªÉn sang s·ª≠ d·ª•ng MySQL"""
    create_env_backup()
    
    # ƒê·ªçc file .env hi·ªán t·∫°i
    lines = []
    if os.path.exists('.env'):
        with open('.env', 'r', encoding='utf-8') as f:
            lines = f.readlines()
    
    # Thay ƒë·ªïi DB_TYPE
    new_lines = []
    db_type_found = False
    
    for line in lines:
        if line.startswith('DB_TYPE='):
            new_lines.append('DB_TYPE=mysql\n')
            db_type_found = True
        else:
            new_lines.append(line)
    
    # N·∫øu kh√¥ng t√¨m th·∫•y DB_TYPE, th√™m v√†o
    if not db_type_found:
        new_lines.insert(0, 'DB_TYPE=mysql\n')
    
    # Ghi l·∫°i file
    with open('.env', 'w', encoding='utf-8') as f:
        f.writelines(new_lines)
    
    print("‚úÖ ƒê√£ chuy·ªÉn sang MySQL")
    print("üîó Database: MYSQL")

def switch_to_postgresql():
    """Chuy·ªÉn sang s·ª≠ d·ª•ng PostgreSQL"""
    create_env_backup()
    
    # ƒê·ªçc file .env hi·ªán t·∫°i
    lines = []
    if os.path.exists('.env'):
        with open('.env', 'r', encoding='utf-8') as f:
            lines = f.readlines()
    
    # Thay ƒë·ªïi DB_TYPE
    new_lines = []
    db_type_found = False
    
    for line in lines:
        if line.startswith('DB_TYPE='):
            new_lines.append('DB_TYPE=postgresql\n')
            db_type_found = True
        else:
            new_lines.append(line)
    
    # N·∫øu kh√¥ng t√¨m th·∫•y DB_TYPE, th√™m v√†o
    if not db_type_found:
        new_lines.insert(0, 'DB_TYPE=postgresql\n')
    
    # Ghi l·∫°i file
    with open('.env', 'w', encoding='utf-8') as f:
        f.writelines(new_lines)
    
    print("‚úÖ ƒê√£ chuy·ªÉn sang PostgreSQL")
    print("üîó Database: POSTGRESQL")

def show_current_config():
    """Hi·ªÉn th·ªã c·∫•u h√¨nh database hi·ªán t·∫°i"""
    from db_connection import db_config
    
    print("üìã CURRENT DATABASE CONFIGURATION:")
    print("="*50)
    print(f"Type: {db_config['type'].upper()}")
    print(f"Host: {db_config['host']}")
    print(f"Port: {db_config['port']}")
    print(f"User: {db_config['user']}")
    print(f"Database: {db_config['name']}")
    print("="*50)

def test_connection():
    """Test k·∫øt n·ªëi database"""
    try:
        from db_connection import engine
        
        with engine.connect() as conn:
            result = conn.execute("SELECT 1 as test").fetchone()
            if result:
                print("‚úÖ Database connection successful!")
                show_current_config()
            else:
                print("‚ùå Database connection failed!")
                
    except Exception as e:
        print(f"‚ùå Database connection error: {str(e)}")
        print("üí° Check your database configuration in .env file")

def main():
    """Main function"""
    print("üîÑ DATABASE SWITCHER UTILITY")
    print("="*40)
    
    while True:
        print("\nOptions:")
        print("1. Switch to MySQL")
        print("2. Switch to PostgreSQL") 
        print("3. Show current config")
        print("4. Test connection")
        print("5. Exit")
        
        choice = input("\nChoose option (1-5): ").strip()
        
        if choice == '1':
            switch_to_mysql()
        elif choice == '2':
            switch_to_postgresql()
        elif choice == '3':
            show_current_config()
        elif choice == '4':
            test_connection()
        elif choice == '5':
            print("üëã Goodbye!")
            break
        else:
            print("‚ùå Invalid option. Please choose 1-5.")

if __name__ == "__main__":
    main()
